{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "OpenStatus API",
    "contact": {
      "email": "ping@openstatus.dev",
      "url": "https://www.openstatus.dev"
    },
    "description": "OpenStatus is a open-source synthetic monitoring tool that allows you to monitor your website and API's uptime, latency, and more. \n\n The OpenStatus API allows you to interact with the OpenStatus platform programmatically. \n\n To get started you need to create an account on https://www.openstatus.dev/ and create an api token in your settings."
  },
  "tags": [
    {
      "name": "monitor",
      "description": "Monitor related endpoints",
      "x-displayName": "Monitor"
    },
    {
      "name": "page",
      "description": "Page related endpoints",
      "x-displayName": "Page"
    },
    {
      "name": "status_report",
      "description": "Status report related endpoints",
      "x-displayName": "Status Report"
    },
    {
      "name": "status_report_update",
      "description": "Status report update related endpoints",
      "x-displayName": "Status Report Update"
    },
    {
      "name": "incident",
      "description": "Incident related endpoints",
      "x-displayName": "Incident"
    },
    {
      "name": "maintenance",
      "description": "Maintenance related endpoints",
      "x-displayName": "Maintenance"
    },
    {
      "name": "notification",
      "description": "Notification related endpoints",
      "x-displayName": "Notification"
    },
    {
      "name": "page_subscriber",
      "description": "Page subscriber related endpoints",
      "x-displayName": "Page Subscriber"
    },
    {
      "name": "check",
      "description": "Check related endpoints",
      "x-displayName": "Check"
    },
    {
      "name": "whoami",
      "description": "WhoAmI related endpoints",
      "x-displayName": "WhoAmI"
    }
  ],
  "security": [
    {
      "ApiKeyAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "x-openstatus-key",
        "x-openstatus-key": "string"
      }
    },
    "schemas": {
      "Monitor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The id of the monitor",
            "example": 123
          },
          "periodicity": {
            "type": "string",
            "enum": [
              "30s",
              "1m",
              "5m",
              "10m",
              "30m",
              "1h",
              "other"
            ],
            "description": "How often the monitor should run",
            "example": "1m"
          },
          "url": {
            "type": "string",
            "description": "The url to monitor",
            "example": "https://www.documenso.co"
          },
          "regions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ams",
                "arn",
                "atl",
                "bog",
                "bom",
                "bos",
                "cdg",
                "den",
                "dfw",
                "ewr",
                "eze",
                "fra",
                "gdl",
                "gig",
                "gru",
                "hkg",
                "iad",
                "jnb",
                "lax",
                "lhr",
                "mad",
                "mia",
                "nrt",
                "ord",
                "otp",
                "phx",
                "qro",
                "scl",
                "sjc",
                "sea",
                "sin",
                "syd",
                "waw",
                "yul",
                "yyz"
              ]
            },
            "default": [],
            "description": "Where we should monitor it",
            "example": [
              "ams"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the monitor",
            "example": "Documenso"
          },
          "description": {
            "type": "string",
            "description": "The description of your monitor",
            "example": "Documenso website"
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "HEAD",
              "PUT",
              "PATCH",
              "DELETE",
              "TRACE",
              "CONNECT",
              "OPTIONS"
            ],
            "default": "GET",
            "example": "GET"
          },
          "body": {
            "type": "string",
            "nullable": true,
            "default": "",
            "description": "The body",
            "example": "Hello World"
          },
          "headers": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MonitorHeadersEntry"
            },
            "default": [],
            "description": "The headers of your request",
            "example": [
              {
                "key": "x-apikey",
                "value": "supersecrettoken"
              }
            ]
          },
          "assertions": {
            "type": "array",
            "nullable": true,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "status"
                      ]
                    },
                    "compare": {
                      "type": "string",
                      "enum": [
                        "eq",
                        "not_eq",
                        "gt",
                        "gte",
                        "lt",
                        "lte"
                      ],
                      "description": "The comparison to run",
                      "example": "eq"
                    },
                    "target": {
                      "type": "integer",
                      "minimum": 0,
                      "exclusiveMinimum": true,
                      "description": "The target value"
                    }
                  },
                  "required": [
                    "type",
                    "compare",
                    "target"
                  ],
                  "description": "The status assertion"
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "header"
                      ]
                    },
                    "compare": {
                      "type": "string",
                      "enum": [
                        "contains",
                        "not_contains",
                        "eq",
                        "not_eq",
                        "empty",
                        "not_empty",
                        "gt",
                        "gte",
                        "lt",
                        "lte"
                      ]
                    },
                    "key": {
                      "type": "string",
                      "description": "The key of the header"
                    },
                    "target": {
                      "type": "string",
                      "description": "the header value"
                    }
                  },
                  "required": [
                    "type",
                    "compare",
                    "key",
                    "target"
                  ],
                  "description": "The header assertion"
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "textBody"
                      ]
                    },
                    "compare": {
                      "type": "string",
                      "enum": [
                        "contains",
                        "not_contains",
                        "eq",
                        "not_eq",
                        "empty",
                        "not_empty",
                        "gt",
                        "gte",
                        "lt",
                        "lte"
                      ]
                    },
                    "target": {
                      "type": "string",
                      "description": "The target value"
                    }
                  },
                  "required": [
                    "type",
                    "compare",
                    "target"
                  ],
                  "description": "The text body assertion"
                }
              ],
              "x-varients": [
                {
                  "static": true,
                  "source": "type",
                  "type": "object",
                  "subtype": "string",
                  "name": "status"
                },
                {
                  "static": true,
                  "source": "type",
                  "type": "object",
                  "subtype": "string",
                  "name": "header"
                },
                {
                  "static": true,
                  "source": "type",
                  "type": "object",
                  "subtype": "string",
                  "name": "textBody"
                }
              ]
            },
            "default": [],
            "description": "The assertions to run"
          },
          "active": {
            "type": "boolean",
            "default": false,
            "description": "If the monitor is active"
          },
          "public": {
            "type": "boolean",
            "default": false,
            "description": "If the monitor is public"
          },
          "degradedAfter": {
            "type": "number",
            "nullable": true,
            "description": "The time after the monitor is considered degraded in milliseconds"
          },
          "timeout": {
            "type": "number",
            "nullable": true,
            "default": 45000,
            "description": "The timeout of the request in milliseconds"
          },
          "retry": {
            "type": "number",
            "default": 3,
            "description": "The number of retries to attempt"
          },
          "jobType": {
            "type": "string",
            "enum": [
              "http",
              "tcp",
              "imcp",
              "udp",
              "dns",
              "ssl"
            ],
            "default": "http",
            "description": "The type of the monitor"
          }
        },
        "required": [
          "id",
          "periodicity",
          "url",
          "name"
        ]
      },
      "ErrBadRequest": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "BAD_REQUEST",
              "FORBIDDEN",
              "INTERNAL_SERVER_ERROR",
              "PAYMENT_REQUIRED",
              "CONFLICT",
              "NOT_FOUND",
              "UNAUTHORIZED",
              "METHOD_NOT_ALLOWED",
              "UNPROCESSABLE_ENTITY"
            ],
            "description": "The error code related to the status code.",
            "example": "BAD_REQUEST"
          },
          "message": {
            "type": "string",
            "description": "A human readable message describing the issue.",
            "example": "<string>"
          },
          "docs": {
            "type": "string",
            "description": "A link to the documentation for the error.",
            "example": "https://docs.openstatus.dev/api-references/errors/code/BAD_REQUEST"
          },
          "requestId": {
            "type": "string",
            "description": "The request id to be used for debugging and error reporting.",
            "example": "<uuid>"
          }
        },
        "required": [
          "code",
          "message",
          "docs",
          "requestId"
        ]
      },
      "ErrUnauthorized": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "BAD_REQUEST",
              "FORBIDDEN",
              "INTERNAL_SERVER_ERROR",
              "PAYMENT_REQUIRED",
              "CONFLICT",
              "NOT_FOUND",
              "UNAUTHORIZED",
              "METHOD_NOT_ALLOWED",
              "UNPROCESSABLE_ENTITY"
            ],
            "description": "The error code related to the status code.",
            "example": "UNAUTHORIZED"
          },
          "message": {
            "type": "string",
            "description": "A human readable message describing the issue.",
            "example": "<string>"
          },
          "docs": {
            "type": "string",
            "description": "A link to the documentation for the error.",
            "example": "https://docs.openstatus.dev/api-references/errors/code/UNAUTHORIZED"
          },
          "requestId": {
            "type": "string",
            "description": "The request id to be used for debugging and error reporting.",
            "example": "<uuid>"
          }
        },
        "required": [
          "code",
          "message",
          "docs",
          "requestId"
        ]
      },
      "ErrPaymentRequired": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "BAD_REQUEST",
              "FORBIDDEN",
              "INTERNAL_SERVER_ERROR",
              "PAYMENT_REQUIRED",
              "CONFLICT",
              "NOT_FOUND",
              "UNAUTHORIZED",
              "METHOD_NOT_ALLOWED",
              "UNPROCESSABLE_ENTITY"
            ],
            "description": "The error code related to the status code.",
            "example": "PAYMENT_REQUIRED"
          },
          "message": {
            "type": "string",
            "description": "A human readable message describing the issue.",
            "example": "<string>"
          },
          "docs": {
            "type": "string",
            "description": "A link to the documentation for the error.",
            "example": "https://docs.openstatus.dev/api-references/errors/code/PAYMENT_REQUIRED"
          },
          "requestId": {
            "type": "string",
            "description": "The request id to be used for debugging and error reporting.",
            "example": "<uuid>"
          }
        },
        "required": [
          "code",
          "message",
          "docs",
          "requestId"
        ]
      },
      "ErrForbidden": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "BAD_REQUEST",
              "FORBIDDEN",
              "INTERNAL_SERVER_ERROR",
              "PAYMENT_REQUIRED",
              "CONFLICT",
              "NOT_FOUND",
              "UNAUTHORIZED",
              "METHOD_NOT_ALLOWED",
              "UNPROCESSABLE_ENTITY"
            ],
            "description": "The error code related to the status code.",
            "example": "FORBIDDEN"
          },
          "message": {
            "type": "string",
            "description": "A human readable message describing the issue.",
            "example": "<string>"
          },
          "docs": {
            "type": "string",
            "description": "A link to the documentation for the error.",
            "example": "https://docs.openstatus.dev/api-references/errors/code/FORBIDDEN"
          },
          "requestId": {
            "type": "string",
            "description": "The request id to be used for debugging and error reporting.",
            "example": "<uuid>"
          }
        },
        "required": [
          "code",
          "message",
          "docs",
          "requestId"
        ]
      },
      "ErrNotFound": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "BAD_REQUEST",
              "FORBIDDEN",
              "INTERNAL_SERVER_ERROR",
              "PAYMENT_REQUIRED",
              "CONFLICT",
              "NOT_FOUND",
              "UNAUTHORIZED",
              "METHOD_NOT_ALLOWED",
              "UNPROCESSABLE_ENTITY"
            ],
            "description": "The error code related to the status code.",
            "example": "NOT_FOUND"
          },
          "message": {
            "type": "string",
            "description": "A human readable message describing the issue.",
            "example": "<string>"
          },
          "docs": {
            "type": "string",
            "description": "A link to the documentation for the error.",
            "example": "https://docs.openstatus.dev/api-references/errors/code/NOT_FOUND"
          },
          "requestId": {
            "type": "string",
            "description": "The request id to be used for debugging and error reporting.",
            "example": "<uuid>"
          }
        },
        "required": [
          "code",
          "message",
          "docs",
          "requestId"
        ]
      },
      "ErrConflict": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "BAD_REQUEST",
              "FORBIDDEN",
              "INTERNAL_SERVER_ERROR",
              "PAYMENT_REQUIRED",
              "CONFLICT",
              "NOT_FOUND",
              "UNAUTHORIZED",
              "METHOD_NOT_ALLOWED",
              "UNPROCESSABLE_ENTITY"
            ],
            "description": "The error code related to the status code.",
            "example": "CONFLICT"
          },
          "message": {
            "type": "string",
            "description": "A human readable message describing the issue.",
            "example": "<string>"
          },
          "docs": {
            "type": "string",
            "description": "A link to the documentation for the error.",
            "example": "https://docs.openstatus.dev/api-references/errors/code/CONFLICT"
          },
          "requestId": {
            "type": "string",
            "description": "The request id to be used for debugging and error reporting.",
            "example": "<uuid>"
          }
        },
        "required": [
          "code",
          "message",
          "docs",
          "requestId"
        ]
      },
      "ErrInternalServerError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "enum": [
              "BAD_REQUEST",
              "FORBIDDEN",
              "INTERNAL_SERVER_ERROR",
              "PAYMENT_REQUIRED",
              "CONFLICT",
              "NOT_FOUND",
              "UNAUTHORIZED",
              "METHOD_NOT_ALLOWED",
              "UNPROCESSABLE_ENTITY"
            ],
            "description": "The error code related to the status code.",
            "example": "INTERNAL_SERVER_ERROR"
          },
          "message": {
            "type": "string",
            "description": "A human readable message describing the issue.",
            "example": "<string>"
          },
          "docs": {
            "type": "string",
            "description": "A link to the documentation for the error.",
            "example": "https://docs.openstatus.dev/api-references/errors/code/INTERNAL_SERVER_ERROR"
          },
          "requestId": {
            "type": "string",
            "description": "The request id to be used for debugging and error reporting.",
            "example": "<uuid>"
          }
        },
        "required": [
          "code",
          "message",
          "docs",
          "requestId"
        ]
      },
      "Page": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The id of the page",
            "example": 1
          },
          "title": {
            "type": "string",
            "description": "The title of the page",
            "example": "My Page"
          },
          "description": {
            "type": "string",
            "description": "The description of the page",
            "example": "My awesome status page"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the page",
            "example": "my-page"
          },
          "customDomain": {
            "type": "string",
            "nullable": true,
            "description": "The custom domain of the page. To be configured within the dashboard.",
            "example": "status.acme.com"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string",
                "format": "uri"
              },
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "nullable": true
              }
            ],
            "description": "The icon of the page",
            "example": "https://example.com/icon.png",
            "x-varients": [
              {
                "name": "uri",
                "type": "string"
              },
              {
                "name": "empty",
                "type": "string"
              }
            ]
          },
          "passwordProtected": {
            "type": "boolean",
            "default": false,
            "description": "Make the page password protected. Used with the 'passwordProtected' property.",
            "example": true
          },
          "password": {
            "type": "string",
            "nullable": true,
            "description": "Your password to protect the page from the public",
            "example": "hidden-password"
          },
          "showMonitorValues": {
            "type": "boolean",
            "nullable": true,
            "default": true,
            "description": "Displays the total and failed request numbers for each monitor",
            "example": true
          },
          "monitors": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "The monitors of the page as an array of ids. We recommend using the object format to include the order.",
                "deprecated": true,
                "example": [
                  1,
                  2
                ]
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "monitorId": {
                      "type": "number"
                    },
                    "order": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "monitorId",
                    "order"
                  ]
                },
                "description": "The monitor as object allowing to pass id and order",
                "example": [
                  {
                    "monitorId": 1,
                    "order": 0
                  },
                  {
                    "monitorId": 2,
                    "order": 1
                  }
                ]
              }
            ],
            "x-varients": [
              {
                "name": "number",
                "type": "array"
              },
              {
                "name": "object",
                "type": "array"
              }
            ]
          }
        },
        "required": [
          "id",
          "title",
          "description",
          "slug"
        ]
      },
      "StatusReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The id of the status report"
          },
          "title": {
            "type": "string",
            "description": "The title of the status report",
            "example": "Documenso"
          },
          "status": {
            "type": "string",
            "enum": [
              "investigating",
              "identified",
              "monitoring",
              "resolved"
            ],
            "description": "The current status of the report"
          },
          "statusReportUpdateIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "number"
            },
            "default": [],
            "description": "The ids of the status report updates"
          },
          "monitorIds": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "default": [],
            "description": "Ids of the monitors the status report."
          },
          "pageId": {
            "type": "number",
            "description": "The id of the page this status report belongs to"
          }
        },
        "required": [
          "id",
          "title",
          "status",
          "pageId"
        ]
      },
      "StatusReportUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true,
            "description": "The id of the update"
          },
          "status": {
            "type": "string",
            "enum": [
              "investigating",
              "identified",
              "monitoring",
              "resolved"
            ],
            "description": "The status of the update"
          },
          "date": {
            "type": "string",
            "nullable": true,
            "default": "2025-06-06T12:46:39.294Z",
            "description": "The date of the update in ISO8601 format"
          },
          "message": {
            "type": "string",
            "description": "The message of the update"
          },
          "statusReportId": {
            "type": "number",
            "description": "The id of the status report"
          }
        },
        "required": [
          "status",
          "message",
          "statusReportId"
        ]
      },
      "Incident": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The id of the incident",
            "example": 1
          },
          "startedAt": {
            "type": "string",
            "nullable": true,
            "description": "The date the incident started"
          },
          "monitorId": {
            "type": "number",
            "nullable": true,
            "description": "The id of the monitor associated with the incident",
            "example": 1
          },
          "acknowledgedAt": {
            "type": "string",
            "nullable": true,
            "description": "The date the incident was acknowledged"
          },
          "acknowledgedBy": {
            "type": "number",
            "nullable": true,
            "description": "The user who acknowledged the incident"
          },
          "resolvedAt": {
            "type": "string",
            "nullable": true,
            "description": "The date the incident was resolved"
          },
          "resolvedBy": {
            "type": "number",
            "nullable": true,
            "description": "The user who resolved the incident"
          }
        },
        "required": [
          "id",
          "startedAt",
          "monitorId",
          "acknowledgedBy",
          "resolvedBy"
        ]
      },
      "Maintenance": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The id of the maintenance",
            "example": 1
          },
          "title": {
            "type": "string",
            "description": "The title of the maintenance",
            "example": "Database Upgrade"
          },
          "message": {
            "type": "string",
            "description": "The message describing the maintenance",
            "example": "Upgrading database to improve performance"
          },
          "from": {
            "type": "string",
            "nullable": true,
            "description": "When the maintenance starts"
          },
          "to": {
            "type": "string",
            "nullable": true,
            "description": "When the maintenance ends"
          },
          "monitorIds": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "default": [],
            "description": "IDs of affected monitors"
          },
          "pageId": {
            "type": "number",
            "description": "The id of the status page this maintenance belongs to"
          }
        },
        "required": [
          "id",
          "title",
          "message",
          "from",
          "to",
          "pageId"
        ]
      },
      "Notification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The id of the notification",
            "example": 1
          },
          "name": {
            "type": "string",
            "description": "The name of the notification",
            "example": "OpenStatus Discord"
          },
          "provider": {
            "type": "string",
            "enum": [
              "email",
              "discord",
              "ntfy",
              "pagerduty",
              "opsgenie",
              "slack",
              "sms",
              "webhook"
            ],
            "description": "The provider of the notification",
            "example": "discord"
          },
          "payload": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                },
                "required": [
                  "email"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "sms": {
                    "type": "string",
                    "pattern": "^([+]?[\\s0-9]+)?(\\d{3}|[(]?[0-9]+[)])?([-]?[\\s]?[0-9])+$"
                  }
                },
                "required": [
                  "sms"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "slack": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "required": [
                  "slack"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "discord": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "required": [
                  "discord"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "pagerduty": {
                    "type": "string"
                  }
                },
                "required": [
                  "pagerduty"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "opsgenie": {
                    "type": "object",
                    "properties": {
                      "apiKey": {
                        "type": "string"
                      },
                      "region": {
                        "type": "string",
                        "enum": [
                          "us",
                          "eu"
                        ]
                      }
                    },
                    "required": [
                      "apiKey",
                      "region"
                    ]
                  }
                },
                "required": [
                  "opsgenie"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "ntfy": {
                    "type": "object",
                    "properties": {
                      "topic": {
                        "type": "string",
                        "default": ""
                      },
                      "serverUrl": {
                        "type": "string",
                        "default": "https://ntfy.sh"
                      },
                      "token": {
                        "type": "string"
                      }
                    }
                  }
                },
                "required": [
                  "ntfy"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "webhook": {
                    "type": "object",
                    "properties": {
                      "endpoint": {
                        "type": "string",
                        "format": "uri"
                      },
                      "headers": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "key",
                            "value"
                          ]
                        }
                      }
                    },
                    "required": [
                      "endpoint"
                    ]
                  }
                },
                "required": [
                  "webhook"
                ]
              }
            ],
            "description": "The data of the notification",
            "x-varients": [
              {
                "type": "object",
                "subtype": "string",
                "source": "email",
                "name": "email"
              },
              {
                "type": "object",
                "subtype": "string",
                "source": "sms",
                "name": "sms"
              },
              {
                "type": "object",
                "subtype": "string",
                "source": "slack",
                "name": "slack"
              },
              {
                "type": "object",
                "subtype": "string",
                "source": "discord",
                "name": "discord"
              },
              {
                "type": "object",
                "subtype": "string",
                "source": "pagerduty",
                "name": "pagerduty"
              },
              {
                "type": "object",
                "subtype": "string",
                "source": "opsgenie",
                "name": "opsgenie"
              },
              {
                "type": "object",
                "subtype": "string",
                "source": "ntfy",
                "name": "ntfy"
              },
              {
                "type": "object",
                "subtype": "string",
                "source": "webhook",
                "name": "webhook"
              }
            ]
          },
          "monitors": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "number"
            },
            "description": "The monitors that the notification is linked to",
            "example": [
              1,
              2
            ]
          }
        },
        "required": [
          "id",
          "name",
          "provider",
          "payload"
        ]
      },
      "PageSubscriber": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "The id of the subscriber",
            "example": 1
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email of the subscriber"
          },
          "pageId": {
            "type": "number",
            "description": "The id of the page to subscribe to",
            "example": 1
          }
        },
        "required": [
          "id",
          "email",
          "pageId"
        ]
      },
      "Workspace": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The current workspace name"
          },
          "slug": {
            "type": "string",
            "description": "The current workspace slug"
          },
          "plan": {
            "type": "string",
            "nullable": true,
            "enum": [
              "free",
              "starter",
              "team"
            ],
            "default": "free",
            "description": "The current workspace plan"
          }
        },
        "required": [
          "slug"
        ]
      },
      "GetMonitorOutput": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Monitor"
        },
        "x-responsebody": true
      },
      "GetMonitorInput": {
        "type": "object",
        "x-inputname": "GetMonitorInput",
        "x-requestbody": true,
        "properties": {},
        "required": []
      },
      "PostMonitorInput": {
        "type": "object",
        "properties": {
          "periodicity": {
            "type": "string",
            "enum": [
              "30s",
              "1m",
              "5m",
              "10m",
              "30m",
              "1h",
              "other"
            ],
            "description": "How often the monitor should run",
            "example": "1m"
          },
          "url": {
            "type": "string",
            "description": "The url to monitor",
            "example": "https://www.documenso.co"
          },
          "regions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ams",
                "arn",
                "atl",
                "bog",
                "bom",
                "bos",
                "cdg",
                "den",
                "dfw",
                "ewr",
                "eze",
                "fra",
                "gdl",
                "gig",
                "gru",
                "hkg",
                "iad",
                "jnb",
                "lax",
                "lhr",
                "mad",
                "mia",
                "nrt",
                "ord",
                "otp",
                "phx",
                "qro",
                "scl",
                "sjc",
                "sea",
                "sin",
                "syd",
                "waw",
                "yul",
                "yyz"
              ]
            },
            "default": [],
            "description": "Where we should monitor it",
            "example": [
              "ams"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the monitor",
            "example": "Documenso"
          },
          "description": {
            "type": "string",
            "description": "The description of your monitor",
            "example": "Documenso website"
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "HEAD",
              "PUT",
              "PATCH",
              "DELETE",
              "TRACE",
              "CONNECT",
              "OPTIONS"
            ],
            "default": "GET",
            "example": "GET"
          },
          "body": {
            "type": "string",
            "nullable": true,
            "default": "",
            "description": "The body",
            "example": "Hello World"
          },
          "headers": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PostMonitorInputHeadersEntry"
            },
            "default": [],
            "description": "The headers of your request",
            "example": [
              {
                "key": "x-apikey",
                "value": "supersecrettoken"
              }
            ]
          },
          "assertions": {
            "type": "array",
            "nullable": true,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "status"
                      ]
                    },
                    "compare": {
                      "type": "string",
                      "enum": [
                        "eq",
                        "not_eq",
                        "gt",
                        "gte",
                        "lt",
                        "lte"
                      ],
                      "description": "The comparison to run",
                      "example": "eq"
                    },
                    "target": {
                      "type": "integer",
                      "minimum": 0,
                      "exclusiveMinimum": true,
                      "description": "The target value"
                    }
                  },
                  "required": [
                    "type",
                    "compare",
                    "target"
                  ],
                  "description": "The status assertion"
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "header"
                      ]
                    },
                    "compare": {
                      "type": "string",
                      "enum": [
                        "contains",
                        "not_contains",
                        "eq",
                        "not_eq",
                        "empty",
                        "not_empty",
                        "gt",
                        "gte",
                        "lt",
                        "lte"
                      ]
                    },
                    "key": {
                      "type": "string",
                      "description": "The key of the header"
                    },
                    "target": {
                      "type": "string",
                      "description": "the header value"
                    }
                  },
                  "required": [
                    "type",
                    "compare",
                    "key",
                    "target"
                  ],
                  "description": "The header assertion"
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "textBody"
                      ]
                    },
                    "compare": {
                      "type": "string",
                      "enum": [
                        "contains",
                        "not_contains",
                        "eq",
                        "not_eq",
                        "empty",
                        "not_empty",
                        "gt",
                        "gte",
                        "lt",
                        "lte"
                      ]
                    },
                    "target": {
                      "type": "string",
                      "description": "The target value"
                    }
                  },
                  "required": [
                    "type",
                    "compare",
                    "target"
                  ],
                  "description": "The text body assertion"
                }
              ],
              "x-varients": [
                {
                  "static": true,
                  "source": "type",
                  "type": "object",
                  "subtype": "string",
                  "name": "status"
                },
                {
                  "static": true,
                  "source": "type",
                  "type": "object",
                  "subtype": "string",
                  "name": "header"
                },
                {
                  "static": true,
                  "source": "type",
                  "type": "object",
                  "subtype": "string",
                  "name": "textBody"
                }
              ]
            },
            "default": [],
            "description": "The assertions to run"
          },
          "active": {
            "type": "boolean",
            "default": false,
            "description": "If the monitor is active"
          },
          "public": {
            "type": "boolean",
            "default": false,
            "description": "If the monitor is public"
          },
          "degradedAfter": {
            "type": "number",
            "nullable": true,
            "description": "The time after the monitor is considered degraded in milliseconds"
          },
          "timeout": {
            "type": "number",
            "nullable": true,
            "default": 45000,
            "description": "The timeout of the request in milliseconds"
          },
          "retry": {
            "type": "number",
            "default": 3,
            "description": "The number of retries to attempt"
          },
          "jobType": {
            "type": "string",
            "enum": [
              "http",
              "tcp",
              "imcp",
              "udp",
              "dns",
              "ssl"
            ],
            "default": "http",
            "description": "The type of the monitor"
          }
        },
        "required": [
          "periodicity",
          "url",
          "name"
        ],
        "x-requestbody": true,
        "x-inputname": "PostMonitorInput"
      },
      "GetMonitorIdInput": {
        "type": "object",
        "x-inputname": "GetMonitorIdInput",
        "x-requestbody": true,
        "properties": {
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the monitor",
            "example": "1"
          }
        },
        "required": [
          "id"
        ]
      },
      "PutMonitorIdInput": {
        "type": "object",
        "properties": {
          "periodicity": {
            "type": "string",
            "enum": [
              "30s",
              "1m",
              "5m",
              "10m",
              "30m",
              "1h",
              "other"
            ],
            "description": "How often the monitor should run",
            "example": "1m"
          },
          "url": {
            "type": "string",
            "description": "The url to monitor",
            "example": "https://www.documenso.co"
          },
          "regions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ams",
                "arn",
                "atl",
                "bog",
                "bom",
                "bos",
                "cdg",
                "den",
                "dfw",
                "ewr",
                "eze",
                "fra",
                "gdl",
                "gig",
                "gru",
                "hkg",
                "iad",
                "jnb",
                "lax",
                "lhr",
                "mad",
                "mia",
                "nrt",
                "ord",
                "otp",
                "phx",
                "qro",
                "scl",
                "sjc",
                "sea",
                "sin",
                "syd",
                "waw",
                "yul",
                "yyz"
              ]
            },
            "default": [],
            "description": "Where we should monitor it",
            "example": [
              "ams"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the monitor",
            "example": "Documenso"
          },
          "description": {
            "type": "string",
            "description": "The description of your monitor",
            "example": "Documenso website"
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "HEAD",
              "PUT",
              "PATCH",
              "DELETE",
              "TRACE",
              "CONNECT",
              "OPTIONS"
            ],
            "default": "GET",
            "example": "GET"
          },
          "body": {
            "type": "string",
            "nullable": true,
            "default": "",
            "description": "The body",
            "example": "Hello World"
          },
          "headers": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PutMonitorIdInputHeadersEntry"
            },
            "default": [],
            "description": "The headers of your request",
            "example": [
              {
                "key": "x-apikey",
                "value": "supersecrettoken"
              }
            ]
          },
          "assertions": {
            "type": "array",
            "nullable": true,
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "status"
                      ]
                    },
                    "compare": {
                      "type": "string",
                      "enum": [
                        "eq",
                        "not_eq",
                        "gt",
                        "gte",
                        "lt",
                        "lte"
                      ],
                      "description": "The comparison to run",
                      "example": "eq"
                    },
                    "target": {
                      "type": "integer",
                      "minimum": 0,
                      "exclusiveMinimum": true,
                      "description": "The target value"
                    }
                  },
                  "required": [
                    "type",
                    "compare",
                    "target"
                  ],
                  "description": "The status assertion"
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "header"
                      ]
                    },
                    "compare": {
                      "type": "string",
                      "enum": [
                        "contains",
                        "not_contains",
                        "eq",
                        "not_eq",
                        "empty",
                        "not_empty",
                        "gt",
                        "gte",
                        "lt",
                        "lte"
                      ]
                    },
                    "key": {
                      "type": "string",
                      "description": "The key of the header"
                    },
                    "target": {
                      "type": "string",
                      "description": "the header value"
                    }
                  },
                  "required": [
                    "type",
                    "compare",
                    "key",
                    "target"
                  ],
                  "description": "The header assertion"
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "textBody"
                      ]
                    },
                    "compare": {
                      "type": "string",
                      "enum": [
                        "contains",
                        "not_contains",
                        "eq",
                        "not_eq",
                        "empty",
                        "not_empty",
                        "gt",
                        "gte",
                        "lt",
                        "lte"
                      ]
                    },
                    "target": {
                      "type": "string",
                      "description": "The target value"
                    }
                  },
                  "required": [
                    "type",
                    "compare",
                    "target"
                  ],
                  "description": "The text body assertion"
                }
              ],
              "x-varients": [
                {
                  "static": true,
                  "source": "type",
                  "type": "object",
                  "subtype": "string",
                  "name": "status"
                },
                {
                  "static": true,
                  "source": "type",
                  "type": "object",
                  "subtype": "string",
                  "name": "header"
                },
                {
                  "static": true,
                  "source": "type",
                  "type": "object",
                  "subtype": "string",
                  "name": "textBody"
                }
              ]
            },
            "default": [],
            "description": "The assertions to run"
          },
          "active": {
            "type": "boolean",
            "default": false,
            "description": "If the monitor is active"
          },
          "public": {
            "type": "boolean",
            "default": false,
            "description": "If the monitor is public"
          },
          "degradedAfter": {
            "type": "number",
            "nullable": true,
            "description": "The time after the monitor is considered degraded in milliseconds"
          },
          "timeout": {
            "type": "number",
            "nullable": true,
            "default": 45000,
            "description": "The timeout of the request in milliseconds"
          },
          "retry": {
            "type": "number",
            "default": 3,
            "description": "The number of retries to attempt"
          },
          "jobType": {
            "type": "string",
            "enum": [
              "http",
              "tcp",
              "imcp",
              "udp",
              "dns",
              "ssl"
            ],
            "default": "http",
            "description": "The type of the monitor"
          },
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the monitor",
            "example": "1"
          }
        },
        "required": [
          "id"
        ],
        "x-requestbody": true,
        "x-inputname": "PutMonitorIdInput"
      },
      "DeleteMonitorIdOutput": {
        "type": "object",
        "properties": {},
        "x-responsebody": true
      },
      "DeleteMonitorIdInput": {
        "type": "object",
        "x-inputname": "DeleteMonitorIdInput",
        "x-requestbody": true,
        "properties": {
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the monitor",
            "example": "1"
          }
        },
        "required": [
          "id"
        ]
      },
      "PostMonitorHttpInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the monitor"
          },
          "description": {
            "type": "string"
          },
          "retry": {
            "type": "number",
            "maximum": 10,
            "minimum": 1,
            "default": 3,
            "description": "Number of retries to attempt",
            "examples": [
              1,
              3,
              5
            ]
          },
          "degradedAfter": {
            "type": "number",
            "minimum": 0,
            "default": 30000,
            "description": "Time in milliseconds to wait before marking the request as degraded",
            "examples": [
              30000
            ]
          },
          "timeout": {
            "type": "number",
            "minimum": 0,
            "default": 45000,
            "description": "Time in milliseconds to wait before marking the request as timed out",
            "examples": [
              45000
            ]
          },
          "frequency": {
            "type": "string",
            "enum": [
              "30s",
              "1m",
              "5m",
              "10m",
              "30m",
              "1h"
            ]
          },
          "active": {
            "type": "boolean",
            "default": false,
            "description": "Whether the monitor is active"
          },
          "public": {
            "type": "boolean",
            "default": false,
            "description": "Whether the monitor is public"
          },
          "regions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ams",
                "arn",
                "atl",
                "bog",
                "bom",
                "bos",
                "cdg",
                "den",
                "dfw",
                "ewr",
                "eze",
                "fra",
                "gdl",
                "gig",
                "gru",
                "hkg",
                "iad",
                "jnb",
                "lax",
                "lhr",
                "mad",
                "mia",
                "nrt",
                "ord",
                "otp",
                "phx",
                "qro",
                "scl",
                "sjc",
                "sea",
                "sin",
                "syd",
                "waw",
                "yul",
                "yyz"
              ]
            },
            "description": "Regions to run the request in"
          },
          "otelEndpoint": {
            "type": "string",
            "format": "uri",
            "description": "OTEL endpoint to send metrics to",
            "examples": [
              "https://otel.example.com"
            ]
          },
          "otelHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Headers to send with the OTEL request",
            "examples": [
              {
                "Content-Type": "application/json"
              }
            ]
          },
          "assertions": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": [
                        "statusCode"
                      ]
                    },
                    "compare": {
                      "type": "string",
                      "enum": [
                        "eq",
                        "not_eq",
                        "gt",
                        "gte",
                        "lt",
                        "lte"
                      ],
                      "description": "Comparison operator",
                      "examples": [
                        "eq",
                        "not_eq",
                        "gt",
                        "gte",
                        "lt",
                        "lte"
                      ]
                    },
                    "target": {
                      "type": "number",
                      "description": "Status code to assert",
                      "examples": [
                        200,
                        404,
                        418,
                        500
                      ]
                    }
                  },
                  "required": [
                    "kind",
                    "compare",
                    "target"
                  ],
                  "examples": [
                    {
                      "kind": "statusCode",
                      "compare": "eq",
                      "target": 200
                    },
                    {
                      "kind": "statusCode",
                      "compare": "not_eq",
                      "target": 404
                    },
                    {
                      "kind": "statusCode",
                      "compare": "gt",
                      "target": 300
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": [
                        "header"
                      ]
                    },
                    "compare": {
                      "type": "string",
                      "enum": [
                        "contains",
                        "not_contains",
                        "eq",
                        "not_eq",
                        "empty",
                        "not_empty",
                        "gt",
                        "gte",
                        "lt",
                        "lte"
                      ],
                      "description": "Comparison operator",
                      "examples": [
                        "eq",
                        "not_eq",
                        "contains",
                        "not_contains"
                      ]
                    },
                    "key": {
                      "type": "string",
                      "description": "Header key to assert",
                      "examples": [
                        "Content-Type",
                        "X-Request-ID"
                      ]
                    },
                    "target": {
                      "type": "string",
                      "description": "Header value to assert",
                      "examples": [
                        "application/json",
                        "text/html"
                      ]
                    }
                  },
                  "required": [
                    "kind",
                    "compare",
                    "key",
                    "target"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": [
                        "textBody"
                      ]
                    },
                    "compare": {
                      "type": "string",
                      "enum": [
                        "contains",
                        "not_contains",
                        "eq",
                        "not_eq",
                        "empty",
                        "not_empty",
                        "gt",
                        "gte",
                        "lt",
                        "lte"
                      ],
                      "description": "Comparison operator",
                      "examples": [
                        "eq",
                        "not_eq",
                        "contains",
                        "not_contains"
                      ]
                    },
                    "target": {
                      "type": "string",
                      "description": "Text body to assert",
                      "examples": [
                        "Hello, world!",
                        "404 Not Found"
                      ]
                    }
                  },
                  "required": [
                    "kind",
                    "compare",
                    "target"
                  ]
                }
              ],
              "x-varients": [
                {
                  "static": true,
                  "source": "kind",
                  "type": "object",
                  "subtype": "string",
                  "name": "statusCode"
                },
                {
                  "static": true,
                  "source": "kind",
                  "type": "object",
                  "subtype": "string",
                  "name": "header"
                },
                {
                  "static": true,
                  "source": "kind",
                  "type": "object",
                  "subtype": "string",
                  "name": "textBody"
                }
              ]
            },
            "description": "Assertions to run on the response"
          },
          "request": {
            "$ref": "#/components/schemas/PostMonitorHttpInputRequest"
          }
        },
        "required": [
          "name",
          "frequency",
          "regions",
          "request"
        ],
        "x-requestbody": true,
        "x-inputname": "PostMonitorHttpInput"
      },
      "PostMonitorTcpInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the monitor"
          },
          "description": {
            "type": "string"
          },
          "retry": {
            "type": "number",
            "maximum": 10,
            "minimum": 1,
            "default": 3,
            "description": "Number of retries to attempt",
            "examples": [
              1,
              3,
              5
            ]
          },
          "degradedAfter": {
            "type": "number",
            "minimum": 0,
            "default": 30000,
            "description": "Time in milliseconds to wait before marking the request as degraded",
            "examples": [
              30000
            ]
          },
          "timeout": {
            "type": "number",
            "minimum": 0,
            "default": 45000,
            "description": "Time in milliseconds to wait before marking the request as timed out",
            "examples": [
              45000
            ]
          },
          "frequency": {
            "type": "string",
            "enum": [
              "30s",
              "1m",
              "5m",
              "10m",
              "30m",
              "1h"
            ]
          },
          "active": {
            "type": "boolean",
            "default": false,
            "description": "Whether the monitor is active"
          },
          "public": {
            "type": "boolean",
            "default": false,
            "description": "Whether the monitor is public"
          },
          "regions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ams",
                "arn",
                "atl",
                "bog",
                "bom",
                "bos",
                "cdg",
                "den",
                "dfw",
                "ewr",
                "eze",
                "fra",
                "gdl",
                "gig",
                "gru",
                "hkg",
                "iad",
                "jnb",
                "lax",
                "lhr",
                "mad",
                "mia",
                "nrt",
                "ord",
                "otp",
                "phx",
                "qro",
                "scl",
                "sjc",
                "sea",
                "sin",
                "syd",
                "waw",
                "yul",
                "yyz"
              ]
            },
            "description": "Regions to run the request in"
          },
          "otelEndpoint": {
            "type": "string",
            "format": "uri",
            "description": "OTEL endpoint to send metrics to",
            "examples": [
              "https://otel.example.com"
            ]
          },
          "otelHeaders": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Headers to send with the OTEL request",
            "examples": [
              {
                "Content-Type": "application/json"
              }
            ]
          },
          "request": {
            "$ref": "#/components/schemas/PostMonitorTcpInputRequest"
          }
        },
        "required": [
          "name",
          "frequency",
          "regions",
          "request"
        ],
        "x-requestbody": true,
        "x-inputname": "PostMonitorTcpInput"
      },
      "GetMonitorIdSummaryOutput": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetMonitorIdSummaryOutputDataEntry"
            }
          }
        },
        "required": [
          "data"
        ],
        "x-responsebody": true
      },
      "GetMonitorIdSummaryInput": {
        "type": "object",
        "x-inputname": "GetMonitorIdSummaryInput",
        "x-requestbody": true,
        "properties": {
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the monitor",
            "example": "1"
          }
        },
        "required": [
          "id"
        ]
      },
      "PostMonitorIdTriggerOutput": {
        "type": "object",
        "properties": {
          "resultId": {
            "type": "number",
            "description": "the id of your check result"
          }
        },
        "required": [
          "resultId"
        ],
        "x-responsebody": true
      },
      "PostMonitorIdTriggerInput": {
        "type": "object",
        "x-inputname": "PostMonitorIdTriggerInput",
        "x-requestbody": true,
        "properties": {
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the monitor",
            "example": "1"
          }
        },
        "required": [
          "id"
        ]
      },
      "GetMonitorIdResultResultIdOutput": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/GetMonitorIdResultResultIdOutputEntry"
        },
        "x-responsebody": true
      },
      "GetMonitorIdResultResultIdInput": {
        "type": "object",
        "x-inputname": "GetMonitorIdResultResultIdInput",
        "x-requestbody": true,
        "properties": {
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the monitor",
            "example": "1"
          },
          "resultId": {
            "x-in": "path",
            "type": "string",
            "description": "The id of the result"
          }
        },
        "required": [
          "id",
          "resultId"
        ]
      },
      "PostMonitorIdRunOutput": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "jobType": {
                  "type": "string",
                  "enum": [
                    "http"
                  ]
                },
                "status": {
                  "type": "number"
                },
                "latency": {
                  "type": "number"
                },
                "region": {
                  "type": "string",
                  "enum": [
                    "ams",
                    "arn",
                    "atl",
                    "bog",
                    "bom",
                    "bos",
                    "cdg",
                    "den",
                    "dfw",
                    "ewr",
                    "eze",
                    "fra",
                    "gdl",
                    "gig",
                    "gru",
                    "hkg",
                    "iad",
                    "jnb",
                    "lax",
                    "lhr",
                    "mad",
                    "mia",
                    "nrt",
                    "ord",
                    "otp",
                    "phx",
                    "qro",
                    "scl",
                    "sjc",
                    "sea",
                    "sin",
                    "syd",
                    "waw",
                    "yul",
                    "yyz"
                  ]
                },
                "timestamp": {
                  "type": "number"
                },
                "timing": {
                  "$ref": "#/components/schemas/PostMonitorIdRunOutputEntryHttpTiming"
                },
                "body": {
                  "type": "string",
                  "nullable": true
                },
                "error": {
                  "type": "string",
                  "nullable": true
                }
              },
              "required": [
                "jobType",
                "status",
                "latency",
                "region",
                "timestamp",
                "timing"
              ]
            },
            {
              "type": "object",
              "properties": {
                "jobType": {
                  "type": "string",
                  "enum": [
                    "tcp"
                  ]
                },
                "latency": {
                  "type": "number"
                },
                "region": {
                  "type": "string",
                  "enum": [
                    "ams",
                    "arn",
                    "atl",
                    "bog",
                    "bom",
                    "bos",
                    "cdg",
                    "den",
                    "dfw",
                    "ewr",
                    "eze",
                    "fra",
                    "gdl",
                    "gig",
                    "gru",
                    "hkg",
                    "iad",
                    "jnb",
                    "lax",
                    "lhr",
                    "mad",
                    "mia",
                    "nrt",
                    "ord",
                    "otp",
                    "phx",
                    "qro",
                    "scl",
                    "sjc",
                    "sea",
                    "sin",
                    "syd",
                    "waw",
                    "yul",
                    "yyz"
                  ]
                },
                "timestamp": {
                  "type": "number"
                },
                "timing": {
                  "$ref": "#/components/schemas/PostMonitorIdRunOutputEntryTcpTiming"
                },
                "error": {
                  "type": "number",
                  "nullable": true
                },
                "errorMessage": {
                  "type": "string",
                  "nullable": true
                }
              },
              "required": [
                "jobType",
                "latency",
                "region",
                "timestamp",
                "timing"
              ]
            }
          ],
          "x-varients": [
            {
              "static": true,
              "source": "jobType",
              "type": "object",
              "subtype": "string",
              "name": "http"
            },
            {
              "static": true,
              "source": "jobType",
              "type": "object",
              "subtype": "string",
              "name": "tcp"
            }
          ]
        },
        "x-responsebody": true
      },
      "PostMonitorIdRunInput": {
        "type": "object",
        "x-inputname": "PostMonitorIdRunInput",
        "x-requestbody": true,
        "properties": {
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the monitor",
            "example": "1"
          },
          "no-wait": {
            "x-in": "query",
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Don't wait for the result"
          }
        },
        "required": [
          "id"
        ]
      },
      "GetPageIdInput": {
        "type": "object",
        "x-inputname": "GetPageIdInput",
        "x-requestbody": true,
        "properties": {
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the page",
            "example": "1"
          }
        },
        "required": [
          "id"
        ]
      },
      "PutPageIdInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the page",
            "example": "My Page"
          },
          "description": {
            "type": "string",
            "description": "The description of the page",
            "example": "My awesome status page"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the page",
            "example": "my-page"
          },
          "customDomain": {
            "type": "string",
            "nullable": true,
            "description": "The custom domain of the page. To be configured within the dashboard.",
            "example": "status.acme.com"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string",
                "format": "uri"
              },
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "nullable": true
              }
            ],
            "description": "The icon of the page",
            "example": "https://example.com/icon.png",
            "x-varients": [
              {
                "name": "uri",
                "type": "string"
              },
              {
                "name": "empty",
                "type": "string"
              }
            ]
          },
          "passwordProtected": {
            "type": "boolean",
            "default": false,
            "description": "Make the page password protected. Used with the 'passwordProtected' property.",
            "example": true
          },
          "password": {
            "type": "string",
            "nullable": true,
            "description": "Your password to protect the page from the public",
            "example": "hidden-password"
          },
          "showMonitorValues": {
            "type": "boolean",
            "nullable": true,
            "default": true,
            "description": "Displays the total and failed request numbers for each monitor",
            "example": true
          },
          "monitors": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "The monitors of the page as an array of ids. We recommend using the object format to include the order.",
                "deprecated": true,
                "example": [
                  1,
                  2
                ]
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "monitorId": {
                      "type": "number"
                    },
                    "order": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "monitorId",
                    "order"
                  ]
                },
                "description": "The monitor as object allowing to pass id and order",
                "example": [
                  {
                    "monitorId": 1,
                    "order": 0
                  },
                  {
                    "monitorId": 2,
                    "order": 1
                  }
                ]
              }
            ],
            "x-varients": [
              {
                "name": "number",
                "type": "array"
              },
              {
                "name": "object",
                "type": "array"
              }
            ]
          },
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the page",
            "example": "1"
          }
        },
        "required": [
          "id"
        ],
        "x-requestbody": true,
        "x-inputname": "PutPageIdInput"
      },
      "GetPageOutput": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Page"
        },
        "x-responsebody": true
      },
      "GetPageInput": {
        "type": "object",
        "x-inputname": "GetPageInput",
        "x-requestbody": true,
        "properties": {},
        "required": []
      },
      "PostPageInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the page",
            "example": "My Page"
          },
          "description": {
            "type": "string",
            "description": "The description of the page",
            "example": "My awesome status page"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the page",
            "example": "my-page"
          },
          "customDomain": {
            "type": "string",
            "nullable": true,
            "description": "The custom domain of the page. To be configured within the dashboard.",
            "example": "status.acme.com"
          },
          "icon": {
            "anyOf": [
              {
                "type": "string",
                "format": "uri"
              },
              {
                "type": "string",
                "enum": [
                  ""
                ]
              },
              {
                "nullable": true
              }
            ],
            "description": "The icon of the page",
            "example": "https://example.com/icon.png",
            "x-varients": [
              {
                "name": "uri",
                "type": "string"
              },
              {
                "name": "empty",
                "type": "string"
              }
            ]
          },
          "passwordProtected": {
            "type": "boolean",
            "default": false,
            "description": "Make the page password protected. Used with the 'passwordProtected' property.",
            "example": true
          },
          "password": {
            "type": "string",
            "nullable": true,
            "description": "Your password to protect the page from the public",
            "example": "hidden-password"
          },
          "showMonitorValues": {
            "type": "boolean",
            "nullable": true,
            "default": true,
            "description": "Displays the total and failed request numbers for each monitor",
            "example": true
          },
          "monitors": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "The monitors of the page as an array of ids. We recommend using the object format to include the order.",
                "deprecated": true,
                "example": [
                  1,
                  2
                ]
              },
              {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "monitorId": {
                      "type": "number"
                    },
                    "order": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "monitorId",
                    "order"
                  ]
                },
                "description": "The monitor as object allowing to pass id and order",
                "example": [
                  {
                    "monitorId": 1,
                    "order": 0
                  },
                  {
                    "monitorId": 2,
                    "order": 1
                  }
                ]
              }
            ],
            "x-varients": [
              {
                "name": "number",
                "type": "array"
              },
              {
                "name": "object",
                "type": "array"
              }
            ]
          }
        },
        "required": [
          "title",
          "description",
          "slug"
        ],
        "x-requestbody": true,
        "x-inputname": "PostPageInput"
      },
      "GetStatusReportOutput": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/StatusReport"
        },
        "x-responsebody": true
      },
      "GetStatusReportInput": {
        "type": "object",
        "x-inputname": "GetStatusReportInput",
        "x-requestbody": true,
        "properties": {},
        "required": []
      },
      "PostStatusReportInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the status report",
            "example": "Documenso"
          },
          "status": {
            "type": "string",
            "enum": [
              "investigating",
              "identified",
              "monitoring",
              "resolved"
            ],
            "description": "The current status of the report"
          },
          "monitorIds": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "default": [],
            "description": "Ids of the monitors the status report."
          },
          "pageId": {
            "type": "number",
            "description": "The id of the page this status report belongs to"
          },
          "date": {
            "type": "string",
            "nullable": true,
            "default": "2025-06-06T12:46:39.295Z",
            "description": "The date of the report in ISO8601 format, defaults to now"
          },
          "message": {
            "type": "string",
            "description": "The message of the current status of incident"
          }
        },
        "required": [
          "title",
          "status",
          "pageId",
          "message"
        ],
        "x-requestbody": true,
        "x-inputname": "PostStatusReportInput"
      },
      "DeleteStatusReportIdOutput": {
        "type": "object",
        "properties": {},
        "x-responsebody": true
      },
      "DeleteStatusReportIdInput": {
        "type": "object",
        "x-inputname": "DeleteStatusReportIdInput",
        "x-requestbody": true,
        "properties": {
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the status report",
            "example": "1"
          }
        },
        "required": [
          "id"
        ]
      },
      "GetStatusReportIdInput": {
        "type": "object",
        "x-inputname": "GetStatusReportIdInput",
        "x-requestbody": true,
        "properties": {
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the status report",
            "example": "1"
          }
        },
        "required": [
          "id"
        ]
      },
      "PostStatusReportIdUpdateInput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "investigating",
              "identified",
              "monitoring",
              "resolved"
            ],
            "description": "The status of the update"
          },
          "date": {
            "type": "string",
            "nullable": true,
            "default": "2025-06-06T12:46:39.294Z",
            "description": "The date of the update in ISO8601 format"
          },
          "message": {
            "type": "string",
            "description": "The message of the update"
          },
          "statusReportId": {
            "type": "number",
            "description": "The id of the status report"
          },
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the status report",
            "example": "1"
          }
        },
        "required": [
          "status",
          "message",
          "statusReportId",
          "id"
        ],
        "x-requestbody": true,
        "x-inputname": "PostStatusReportIdUpdateInput"
      },
      "GetStatusReportUpdateIdInput": {
        "type": "object",
        "x-inputname": "GetStatusReportUpdateIdInput",
        "x-requestbody": true,
        "properties": {
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the update",
            "example": "1"
          }
        },
        "required": [
          "id"
        ]
      },
      "PostStatusReportUpdateInput": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "investigating",
              "identified",
              "monitoring",
              "resolved"
            ],
            "description": "The status of the update"
          },
          "date": {
            "type": "string",
            "nullable": true,
            "default": "2025-06-06T12:46:39.294Z",
            "description": "The date of the update in ISO8601 format"
          },
          "message": {
            "type": "string",
            "description": "The message of the update"
          },
          "statusReportId": {
            "type": "number",
            "description": "The id of the status report"
          }
        },
        "required": [
          "status",
          "message",
          "statusReportId"
        ],
        "x-requestbody": true,
        "x-inputname": "PostStatusReportUpdateInput"
      },
      "GetIncidentOutput": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Incident"
        },
        "x-responsebody": true
      },
      "GetIncidentInput": {
        "type": "object",
        "x-inputname": "GetIncidentInput",
        "x-requestbody": true,
        "properties": {},
        "required": []
      },
      "GetIncidentIdInput": {
        "type": "object",
        "x-inputname": "GetIncidentIdInput",
        "x-requestbody": true,
        "properties": {
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the Incident",
            "example": "1"
          }
        },
        "required": [
          "id"
        ]
      },
      "PutIncidentIdInput": {
        "type": "object",
        "properties": {
          "acknowledgedAt": {
            "type": "string",
            "nullable": true,
            "description": "The date the incident was acknowledged"
          },
          "resolvedAt": {
            "type": "string",
            "nullable": true,
            "description": "The date the incident was resolved"
          },
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the Incident",
            "example": "1"
          }
        },
        "required": [
          "id"
        ],
        "x-requestbody": true,
        "x-inputname": "PutIncidentIdInput"
      },
      "GetMaintenanceOutput": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Maintenance"
        },
        "x-responsebody": true
      },
      "GetMaintenanceInput": {
        "type": "object",
        "x-inputname": "GetMaintenanceInput",
        "x-requestbody": true,
        "properties": {},
        "required": []
      },
      "PostMaintenanceInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the maintenance",
            "example": "Database Upgrade"
          },
          "message": {
            "type": "string",
            "description": "The message describing the maintenance",
            "example": "Upgrading database to improve performance"
          },
          "from": {
            "type": "string",
            "nullable": true,
            "description": "When the maintenance starts"
          },
          "to": {
            "type": "string",
            "nullable": true,
            "description": "When the maintenance ends"
          },
          "monitorIds": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "default": [],
            "description": "IDs of affected monitors"
          },
          "pageId": {
            "type": "number",
            "description": "The id of the status page this maintenance belongs to"
          }
        },
        "required": [
          "title",
          "message",
          "from",
          "to",
          "pageId"
        ],
        "x-requestbody": true,
        "x-inputname": "PostMaintenanceInput"
      },
      "GetMaintenanceIdInput": {
        "type": "object",
        "x-inputname": "GetMaintenanceIdInput",
        "x-requestbody": true,
        "properties": {
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the maintenance",
            "example": "1"
          }
        },
        "required": [
          "id"
        ]
      },
      "PutMaintenanceIdInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the maintenance",
            "example": "Database Upgrade"
          },
          "message": {
            "type": "string",
            "description": "The message describing the maintenance",
            "example": "Upgrading database to improve performance"
          },
          "from": {
            "type": "string",
            "nullable": true,
            "description": "When the maintenance starts"
          },
          "to": {
            "type": "string",
            "nullable": true,
            "description": "When the maintenance ends"
          },
          "monitorIds": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "default": [],
            "description": "IDs of affected monitors"
          },
          "pageId": {
            "type": "number",
            "description": "The id of the status page this maintenance belongs to"
          },
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the maintenance",
            "example": "1"
          }
        },
        "required": [
          "id"
        ],
        "x-requestbody": true,
        "x-inputname": "PutMaintenanceIdInput"
      },
      "GetNotificationOutput": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Notification"
        },
        "x-responsebody": true
      },
      "GetNotificationInput": {
        "type": "object",
        "x-inputname": "GetNotificationInput",
        "x-requestbody": true,
        "properties": {},
        "required": []
      },
      "PostNotificationInput": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the notification",
            "example": "OpenStatus Discord"
          },
          "provider": {
            "type": "string",
            "enum": [
              "email",
              "discord",
              "ntfy",
              "pagerduty",
              "opsgenie",
              "slack",
              "sms",
              "webhook"
            ],
            "description": "The provider of the notification",
            "example": "discord"
          },
          "payload": {
            "anyOf": [
              {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  }
                },
                "required": [
                  "email"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "sms": {
                    "type": "string",
                    "pattern": "^([+]?[\\s0-9]+)?(\\d{3}|[(]?[0-9]+[)])?([-]?[\\s]?[0-9])+$"
                  }
                },
                "required": [
                  "sms"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "slack": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "required": [
                  "slack"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "discord": {
                    "type": "string",
                    "format": "uri"
                  }
                },
                "required": [
                  "discord"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "pagerduty": {
                    "type": "string"
                  }
                },
                "required": [
                  "pagerduty"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "opsgenie": {
                    "type": "object",
                    "properties": {
                      "apiKey": {
                        "type": "string"
                      },
                      "region": {
                        "type": "string",
                        "enum": [
                          "us",
                          "eu"
                        ]
                      }
                    },
                    "required": [
                      "apiKey",
                      "region"
                    ]
                  }
                },
                "required": [
                  "opsgenie"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "ntfy": {
                    "type": "object",
                    "properties": {
                      "topic": {
                        "type": "string",
                        "default": ""
                      },
                      "serverUrl": {
                        "type": "string",
                        "default": "https://ntfy.sh"
                      },
                      "token": {
                        "type": "string"
                      }
                    }
                  }
                },
                "required": [
                  "ntfy"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "webhook": {
                    "type": "object",
                    "properties": {
                      "endpoint": {
                        "type": "string",
                        "format": "uri"
                      },
                      "headers": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "key": {
                              "type": "string"
                            },
                            "value": {
                              "type": "string"
                            }
                          },
                          "required": [
                            "key",
                            "value"
                          ]
                        }
                      }
                    },
                    "required": [
                      "endpoint"
                    ]
                  }
                },
                "required": [
                  "webhook"
                ]
              }
            ],
            "description": "The data of the notification",
            "x-varients": [
              {
                "type": "object",
                "subtype": "string",
                "source": "email",
                "name": "email"
              },
              {
                "type": "object",
                "subtype": "string",
                "source": "sms",
                "name": "sms"
              },
              {
                "type": "object",
                "subtype": "string",
                "source": "slack",
                "name": "slack"
              },
              {
                "type": "object",
                "subtype": "string",
                "source": "discord",
                "name": "discord"
              },
              {
                "type": "object",
                "subtype": "string",
                "source": "pagerduty",
                "name": "pagerduty"
              },
              {
                "type": "object",
                "subtype": "string",
                "source": "opsgenie",
                "name": "opsgenie"
              },
              {
                "type": "object",
                "subtype": "string",
                "source": "ntfy",
                "name": "ntfy"
              },
              {
                "type": "object",
                "subtype": "string",
                "source": "webhook",
                "name": "webhook"
              }
            ]
          },
          "monitors": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "number"
            },
            "description": "The monitors that the notification is linked to",
            "example": [
              1,
              2
            ]
          }
        },
        "required": [
          "name",
          "provider",
          "payload"
        ],
        "x-requestbody": true,
        "x-inputname": "PostNotificationInput"
      },
      "GetNotificationIdInput": {
        "type": "object",
        "x-inputname": "GetNotificationIdInput",
        "x-requestbody": true,
        "properties": {
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the notification",
            "example": "1"
          }
        },
        "required": [
          "id"
        ]
      },
      "PostPageSubscriberIdUpdateInput": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "The email of the subscriber"
          },
          "id": {
            "x-in": "path",
            "type": "string",
            "minLength": 1,
            "description": "The id of the page",
            "example": "1"
          }
        },
        "required": [
          "email",
          "id"
        ],
        "x-requestbody": true,
        "x-inputname": "PostPageSubscriberIdUpdateInput"
      },
      "PostCheckHttpOutput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the check"
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostCheckHttpOutputRawEntry"
            },
            "description": "The raw data of the check"
          },
          "response": {
            "$ref": "#/components/schemas/PostCheckHttpOutputResponse"
          },
          "aggregated": {
            "$ref": "#/components/schemas/PostCheckHttpOutputAggregated"
          }
        },
        "required": [
          "id",
          "raw",
          "response"
        ],
        "x-responsebody": true
      },
      "PostCheckHttpInput": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "The url to monitor",
            "example": "https://www.documenso.co"
          },
          "body": {
            "type": "string",
            "nullable": true,
            "default": "",
            "description": "The body",
            "example": "Hello World"
          },
          "headers": {
            "type": "array",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/PostCheckHttpInputHeadersEntry"
            },
            "default": [],
            "description": "The headers of your request",
            "example": [
              {
                "key": "x-apikey",
                "value": "supersecrettoken"
              }
            ]
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "HEAD",
              "PUT",
              "PATCH",
              "DELETE",
              "TRACE",
              "CONNECT",
              "OPTIONS"
            ],
            "default": "GET",
            "example": "GET"
          },
          "regions": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ams",
                "arn",
                "atl",
                "bog",
                "bom",
                "bos",
                "cdg",
                "den",
                "dfw",
                "ewr",
                "eze",
                "fra",
                "gdl",
                "gig",
                "gru",
                "hkg",
                "iad",
                "jnb",
                "lax",
                "lhr",
                "mad",
                "mia",
                "nrt",
                "ord",
                "otp",
                "phx",
                "qro",
                "scl",
                "sjc",
                "sea",
                "sin",
                "syd",
                "waw",
                "yul",
                "yyz"
              ]
            },
            "default": [],
            "description": "Where we should monitor it",
            "example": [
              "ams"
            ]
          },
          "runCount": {
            "type": "number",
            "maximum": 5,
            "default": 1,
            "description": "The number of times to run the check"
          },
          "aggregated": {
            "type": "boolean",
            "description": "Whether to aggregate the results or not"
          }
        },
        "required": [
          "url"
        ],
        "description": "The check request",
        "x-requestbody": true,
        "x-inputname": "PostCheckHttpInput"
      },
      "GetWhoamiInput": {
        "type": "object",
        "x-inputname": "GetWhoamiInput",
        "x-requestbody": true,
        "properties": {},
        "required": []
      },
      "MonitorHeadersEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "MonitorAssertionsEntryStatus": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "status"
            ]
          },
          "compare": {
            "type": "string",
            "enum": [
              "eq",
              "not_eq",
              "gt",
              "gte",
              "lt",
              "lte"
            ],
            "description": "The comparison to run",
            "example": "eq"
          },
          "target": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "The target value"
          }
        },
        "required": [
          "type",
          "compare",
          "target"
        ],
        "description": "The status assertion"
      },
      "MonitorAssertionsEntryHeader": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "header"
            ]
          },
          "compare": {
            "type": "string",
            "enum": [
              "contains",
              "not_contains",
              "eq",
              "not_eq",
              "empty",
              "not_empty",
              "gt",
              "gte",
              "lt",
              "lte"
            ]
          },
          "key": {
            "type": "string",
            "description": "The key of the header"
          },
          "target": {
            "type": "string",
            "description": "the header value"
          }
        },
        "required": [
          "type",
          "compare",
          "key",
          "target"
        ],
        "description": "The header assertion"
      },
      "MonitorAssertionsEntryTextBody": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "textBody"
            ]
          },
          "compare": {
            "type": "string",
            "enum": [
              "contains",
              "not_contains",
              "eq",
              "not_eq",
              "empty",
              "not_empty",
              "gt",
              "gte",
              "lt",
              "lte"
            ]
          },
          "target": {
            "type": "string",
            "description": "The target value"
          }
        },
        "required": [
          "type",
          "compare",
          "target"
        ],
        "description": "The text body assertion"
      },
      "PostMonitorInputHeadersEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "PostMonitorInputAssertionsEntryStatus": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "status"
            ]
          },
          "compare": {
            "type": "string",
            "enum": [
              "eq",
              "not_eq",
              "gt",
              "gte",
              "lt",
              "lte"
            ],
            "description": "The comparison to run",
            "example": "eq"
          },
          "target": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "The target value"
          }
        },
        "required": [
          "type",
          "compare",
          "target"
        ],
        "description": "The status assertion"
      },
      "PostMonitorInputAssertionsEntryHeader": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "header"
            ]
          },
          "compare": {
            "type": "string",
            "enum": [
              "contains",
              "not_contains",
              "eq",
              "not_eq",
              "empty",
              "not_empty",
              "gt",
              "gte",
              "lt",
              "lte"
            ]
          },
          "key": {
            "type": "string",
            "description": "The key of the header"
          },
          "target": {
            "type": "string",
            "description": "the header value"
          }
        },
        "required": [
          "type",
          "compare",
          "key",
          "target"
        ],
        "description": "The header assertion"
      },
      "PostMonitorInputAssertionsEntryTextBody": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "textBody"
            ]
          },
          "compare": {
            "type": "string",
            "enum": [
              "contains",
              "not_contains",
              "eq",
              "not_eq",
              "empty",
              "not_empty",
              "gt",
              "gte",
              "lt",
              "lte"
            ]
          },
          "target": {
            "type": "string",
            "description": "The target value"
          }
        },
        "required": [
          "type",
          "compare",
          "target"
        ],
        "description": "The text body assertion"
      },
      "PutMonitorIdInputHeadersEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "PutMonitorIdInputAssertionsEntryStatus": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "status"
            ]
          },
          "compare": {
            "type": "string",
            "enum": [
              "eq",
              "not_eq",
              "gt",
              "gte",
              "lt",
              "lte"
            ],
            "description": "The comparison to run",
            "example": "eq"
          },
          "target": {
            "type": "integer",
            "minimum": 0,
            "exclusiveMinimum": true,
            "description": "The target value"
          }
        },
        "required": [
          "type",
          "compare",
          "target"
        ],
        "description": "The status assertion"
      },
      "PutMonitorIdInputAssertionsEntryHeader": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "header"
            ]
          },
          "compare": {
            "type": "string",
            "enum": [
              "contains",
              "not_contains",
              "eq",
              "not_eq",
              "empty",
              "not_empty",
              "gt",
              "gte",
              "lt",
              "lte"
            ]
          },
          "key": {
            "type": "string",
            "description": "The key of the header"
          },
          "target": {
            "type": "string",
            "description": "the header value"
          }
        },
        "required": [
          "type",
          "compare",
          "key",
          "target"
        ],
        "description": "The header assertion"
      },
      "PutMonitorIdInputAssertionsEntryTextBody": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "textBody"
            ]
          },
          "compare": {
            "type": "string",
            "enum": [
              "contains",
              "not_contains",
              "eq",
              "not_eq",
              "empty",
              "not_empty",
              "gt",
              "gte",
              "lt",
              "lte"
            ]
          },
          "target": {
            "type": "string",
            "description": "The target value"
          }
        },
        "required": [
          "type",
          "compare",
          "target"
        ],
        "description": "The text body assertion"
      },
      "PostMonitorHttpInputAssertionsEntryStatusCode": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "statusCode"
            ]
          },
          "compare": {
            "type": "string",
            "enum": [
              "eq",
              "not_eq",
              "gt",
              "gte",
              "lt",
              "lte"
            ],
            "description": "Comparison operator",
            "examples": [
              "eq",
              "not_eq",
              "gt",
              "gte",
              "lt",
              "lte"
            ]
          },
          "target": {
            "type": "number",
            "description": "Status code to assert",
            "examples": [
              200,
              404,
              418,
              500
            ]
          }
        },
        "required": [
          "kind",
          "compare",
          "target"
        ],
        "examples": [
          {
            "kind": "statusCode",
            "compare": "eq",
            "target": 200
          },
          {
            "kind": "statusCode",
            "compare": "not_eq",
            "target": 404
          },
          {
            "kind": "statusCode",
            "compare": "gt",
            "target": 300
          }
        ]
      },
      "PostMonitorHttpInputAssertionsEntryHeader": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "header"
            ]
          },
          "compare": {
            "type": "string",
            "enum": [
              "contains",
              "not_contains",
              "eq",
              "not_eq",
              "empty",
              "not_empty",
              "gt",
              "gte",
              "lt",
              "lte"
            ],
            "description": "Comparison operator",
            "examples": [
              "eq",
              "not_eq",
              "contains",
              "not_contains"
            ]
          },
          "key": {
            "type": "string",
            "description": "Header key to assert",
            "examples": [
              "Content-Type",
              "X-Request-ID"
            ]
          },
          "target": {
            "type": "string",
            "description": "Header value to assert",
            "examples": [
              "application/json",
              "text/html"
            ]
          }
        },
        "required": [
          "kind",
          "compare",
          "key",
          "target"
        ]
      },
      "PostMonitorHttpInputAssertionsEntryTextBody": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "enum": [
              "textBody"
            ]
          },
          "compare": {
            "type": "string",
            "enum": [
              "contains",
              "not_contains",
              "eq",
              "not_eq",
              "empty",
              "not_empty",
              "gt",
              "gte",
              "lt",
              "lte"
            ],
            "description": "Comparison operator",
            "examples": [
              "eq",
              "not_eq",
              "contains",
              "not_contains"
            ]
          },
          "target": {
            "type": "string",
            "description": "Text body to assert",
            "examples": [
              "Hello, world!",
              "404 Not Found"
            ]
          }
        },
        "required": [
          "kind",
          "compare",
          "target"
        ]
      },
      "PostMonitorHttpInputRequest": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST",
              "HEAD",
              "PUT",
              "PATCH",
              "DELETE",
              "TRACE",
              "CONNECT",
              "OPTIONS"
            ]
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL to request",
            "examples": [
              "https://openstat.us",
              "https://www.openstatus.dev"
            ]
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Headers to send with the request",
            "examples": [
              {
                "Content-Type": "application/json"
              }
            ]
          },
          "body": {
            "type": "string",
            "description": "Body to send with the request",
            "examples": [
              "{ \"key\": \"value\" }",
              "Hello World"
            ]
          }
        },
        "required": [
          "method",
          "url"
        ],
        "description": "The HTTP Request we are sending"
      },
      "PostMonitorTcpInputRequest": {
        "type": "object",
        "properties": {
          "host": {
            "type": "string",
            "description": "Host to connect to",
            "examples": [
              "example.com",
              "localhost"
            ]
          },
          "port": {
            "type": "number",
            "description": "Port to connect to",
            "examples": [
              80,
              443,
              1337
            ]
          }
        },
        "required": [
          "host",
          "port"
        ],
        "description": "The TCP Request we are sending"
      },
      "GetMonitorIdSummaryOutputDataEntry": {
        "type": "object",
        "properties": {
          "ok": {
            "type": "integer",
            "description": "The number of ok responses (defined by the assertions - or by default status code 200)"
          },
          "count": {
            "type": "integer",
            "description": "The total number of request"
          },
          "day": {
            "type": "string",
            "nullable": true,
            "description": "The date of the daily stat in ISO8601 format"
          }
        },
        "required": [
          "ok",
          "count",
          "day"
        ]
      },
      "GetMonitorIdResultResultIdOutputEntry": {
        "type": "object",
        "properties": {
          "latency": {
            "type": "integer"
          },
          "statusCode": {
            "type": "integer",
            "nullable": true
          },
          "monitorId": {
            "type": "string",
            "default": ""
          },
          "url": {
            "type": "string"
          },
          "error": {
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "region": {
            "type": "string",
            "enum": [
              "ams",
              "arn",
              "atl",
              "bog",
              "bom",
              "bos",
              "cdg",
              "den",
              "dfw",
              "ewr",
              "eze",
              "fra",
              "gdl",
              "gig",
              "gru",
              "hkg",
              "iad",
              "jnb",
              "lax",
              "lhr",
              "mad",
              "mia",
              "nrt",
              "ord",
              "otp",
              "phx",
              "qro",
              "scl",
              "sjc",
              "sea",
              "sin",
              "syd",
              "waw",
              "yul",
              "yyz"
            ]
          },
          "timestamp": {
            "type": "integer"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timing": {
            "$ref": "#/components/schemas/GetMonitorIdResultResultIdOutputEntryTiming"
          }
        },
        "required": [
          "latency",
          "region"
        ]
      },
      "GetMonitorIdResultResultIdOutputEntryTiming": {
        "type": "object",
        "nullable": true,
        "properties": {
          "dnsStart": {
            "type": "number"
          },
          "dnsDone": {
            "type": "number"
          },
          "connectStart": {
            "type": "number"
          },
          "connectDone": {
            "type": "number"
          },
          "tlsHandshakeStart": {
            "type": "number"
          },
          "tlsHandshakeDone": {
            "type": "number"
          },
          "firstByteStart": {
            "type": "number"
          },
          "firstByteDone": {
            "type": "number"
          },
          "transferStart": {
            "type": "number"
          },
          "transferDone": {
            "type": "number"
          }
        },
        "required": [
          "dnsStart",
          "dnsDone",
          "connectStart",
          "connectDone",
          "tlsHandshakeStart",
          "tlsHandshakeDone",
          "firstByteStart",
          "firstByteDone",
          "transferStart",
          "transferDone"
        ]
      },
      "PostMonitorIdRunOutputEntryHttp": {
        "type": "object",
        "properties": {
          "jobType": {
            "type": "string",
            "enum": [
              "http"
            ]
          },
          "status": {
            "type": "number"
          },
          "latency": {
            "type": "number"
          },
          "region": {
            "type": "string",
            "enum": [
              "ams",
              "arn",
              "atl",
              "bog",
              "bom",
              "bos",
              "cdg",
              "den",
              "dfw",
              "ewr",
              "eze",
              "fra",
              "gdl",
              "gig",
              "gru",
              "hkg",
              "iad",
              "jnb",
              "lax",
              "lhr",
              "mad",
              "mia",
              "nrt",
              "ord",
              "otp",
              "phx",
              "qro",
              "scl",
              "sjc",
              "sea",
              "sin",
              "syd",
              "waw",
              "yul",
              "yyz"
            ]
          },
          "timestamp": {
            "type": "number"
          },
          "timing": {
            "$ref": "#/components/schemas/PostMonitorIdRunOutputEntryHttpTiming"
          },
          "body": {
            "type": "string",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "jobType",
          "status",
          "latency",
          "region",
          "timestamp",
          "timing"
        ]
      },
      "PostMonitorIdRunOutputEntryHttpTiming": {
        "type": "object",
        "properties": {
          "dnsStart": {
            "type": "number"
          },
          "dnsDone": {
            "type": "number"
          },
          "connectStart": {
            "type": "number"
          },
          "connectDone": {
            "type": "number"
          },
          "tlsHandshakeStart": {
            "type": "number"
          },
          "tlsHandshakeDone": {
            "type": "number"
          },
          "firstByteStart": {
            "type": "number"
          },
          "firstByteDone": {
            "type": "number"
          },
          "transferStart": {
            "type": "number"
          },
          "transferDone": {
            "type": "number"
          }
        },
        "required": [
          "dnsStart",
          "dnsDone",
          "connectStart",
          "connectDone",
          "tlsHandshakeStart",
          "tlsHandshakeDone",
          "firstByteStart",
          "firstByteDone",
          "transferStart",
          "transferDone"
        ]
      },
      "PostMonitorIdRunOutputEntryTcp": {
        "type": "object",
        "properties": {
          "jobType": {
            "type": "string",
            "enum": [
              "tcp"
            ]
          },
          "latency": {
            "type": "number"
          },
          "region": {
            "type": "string",
            "enum": [
              "ams",
              "arn",
              "atl",
              "bog",
              "bom",
              "bos",
              "cdg",
              "den",
              "dfw",
              "ewr",
              "eze",
              "fra",
              "gdl",
              "gig",
              "gru",
              "hkg",
              "iad",
              "jnb",
              "lax",
              "lhr",
              "mad",
              "mia",
              "nrt",
              "ord",
              "otp",
              "phx",
              "qro",
              "scl",
              "sjc",
              "sea",
              "sin",
              "syd",
              "waw",
              "yul",
              "yyz"
            ]
          },
          "timestamp": {
            "type": "number"
          },
          "timing": {
            "$ref": "#/components/schemas/PostMonitorIdRunOutputEntryTcpTiming"
          },
          "error": {
            "type": "number",
            "nullable": true
          },
          "errorMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "jobType",
          "latency",
          "region",
          "timestamp",
          "timing"
        ]
      },
      "PostMonitorIdRunOutputEntryTcpTiming": {
        "type": "object",
        "properties": {
          "tcpStart": {
            "type": "number"
          },
          "tcpDone": {
            "type": "number"
          }
        },
        "required": [
          "tcpStart",
          "tcpDone"
        ]
      },
      "PostCheckHttpOutputRawEntry": {
        "type": "object",
        "properties": {
          "dnsStart": {
            "type": "number",
            "description": "DNS timestamp start time in UTC "
          },
          "dnsDone": {
            "type": "number",
            "description": "DNS timestamp end time in UTC "
          },
          "connectStart": {
            "type": "number",
            "description": "Connect timestamp start time in UTC "
          },
          "connectDone": {
            "type": "number",
            "description": "Connect timestamp end time in UTC "
          },
          "tlsHandshakeStart": {
            "type": "number",
            "description": "TLS handshake timestamp start time in UTC "
          },
          "tlsHandshakeDone": {
            "type": "number",
            "description": "TLS handshake timestamp end time in UTC "
          },
          "firstByteStart": {
            "type": "number",
            "description": "First byte timestamp start time in UTC "
          },
          "firstByteDone": {
            "type": "number",
            "description": "First byte timestamp end time in UTC "
          },
          "transferStart": {
            "type": "number",
            "description": "Transfer timestamp start time in UTC "
          },
          "transferDone": {
            "type": "number",
            "description": "Transfer timestamp end time in UTC "
          }
        },
        "required": [
          "dnsStart",
          "dnsDone",
          "connectStart",
          "connectDone",
          "tlsHandshakeStart",
          "tlsHandshakeDone",
          "firstByteStart",
          "firstByteDone",
          "transferStart",
          "transferDone"
        ]
      },
      "PostCheckHttpOutputResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "number",
            "description": "The timestamp of the response in UTC"
          },
          "status": {
            "type": "number",
            "description": "The status code of the response"
          },
          "latency": {
            "type": "number",
            "description": "The latency of the response"
          },
          "body": {
            "type": "string",
            "description": "The body of the response"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "The headers of the response"
          },
          "timing": {
            "$ref": "#/components/schemas/PostCheckHttpOutputResponseTiming"
          },
          "aggregated": {
            "$ref": "#/components/schemas/PostCheckHttpOutputResponseAggregated"
          },
          "region": {
            "type": "string",
            "description": "The region where the check ran"
          }
        },
        "required": [
          "timestamp",
          "status",
          "latency",
          "timing",
          "region"
        ],
        "description": "The last response of the check"
      },
      "PostCheckHttpOutputResponseTiming": {
        "type": "object",
        "properties": {
          "dnsStart": {
            "type": "number",
            "description": "DNS timestamp start time in UTC "
          },
          "dnsDone": {
            "type": "number",
            "description": "DNS timestamp end time in UTC "
          },
          "connectStart": {
            "type": "number",
            "description": "Connect timestamp start time in UTC "
          },
          "connectDone": {
            "type": "number",
            "description": "Connect timestamp end time in UTC "
          },
          "tlsHandshakeStart": {
            "type": "number",
            "description": "TLS handshake timestamp start time in UTC "
          },
          "tlsHandshakeDone": {
            "type": "number",
            "description": "TLS handshake timestamp end time in UTC "
          },
          "firstByteStart": {
            "type": "number",
            "description": "First byte timestamp start time in UTC "
          },
          "firstByteDone": {
            "type": "number",
            "description": "First byte timestamp end time in UTC "
          },
          "transferStart": {
            "type": "number",
            "description": "Transfer timestamp start time in UTC "
          },
          "transferDone": {
            "type": "number",
            "description": "Transfer timestamp end time in UTC "
          }
        },
        "required": [
          "dnsStart",
          "dnsDone",
          "connectStart",
          "connectDone",
          "tlsHandshakeStart",
          "tlsHandshakeDone",
          "firstByteStart",
          "firstByteDone",
          "transferStart",
          "transferDone"
        ],
        "description": "The timing metrics of the response"
      },
      "PostCheckHttpOutputResponseAggregated": {
        "type": "object",
        "properties": {
          "dns": {
            "$ref": "#/components/schemas/PostCheckHttpOutputResponseAggregatedDns"
          },
          "connection": {
            "$ref": "#/components/schemas/PostCheckHttpOutputResponseAggregatedConnection"
          },
          "tls": {
            "$ref": "#/components/schemas/PostCheckHttpOutputResponseAggregatedTls"
          },
          "firstByte": {
            "$ref": "#/components/schemas/PostCheckHttpOutputResponseAggregatedFirstByte"
          },
          "transfer": {
            "$ref": "#/components/schemas/PostCheckHttpOutputResponseAggregatedTransfer"
          },
          "latency": {
            "$ref": "#/components/schemas/PostCheckHttpOutputResponseAggregatedLatency"
          }
        },
        "required": [
          "dns",
          "connection",
          "tls",
          "firstByte",
          "transfer",
          "latency"
        ],
        "description": "The aggregated data dns timing of the check"
      },
      "PostCheckHttpOutputResponseAggregatedDns": {
        "type": "object",
        "properties": {
          "p50": {
            "type": "number",
            "description": "The 50th percentile"
          },
          "p75": {
            "type": "number",
            "description": "The 75th percentile"
          },
          "p95": {
            "type": "number",
            "description": "The 95th percentile"
          },
          "p99": {
            "type": "number",
            "description": "The 99th percentile"
          },
          "min": {
            "type": "number",
            "description": "The minimum value"
          },
          "max": {
            "type": "number",
            "description": "The maximum value"
          }
        },
        "required": [
          "p50",
          "p75",
          "p95",
          "p99",
          "min",
          "max"
        ],
        "description": "The aggregated DNS timing of the check"
      },
      "PostCheckHttpOutputResponseAggregatedConnection": {
        "type": "object",
        "properties": {
          "p50": {
            "type": "number",
            "description": "The 50th percentile"
          },
          "p75": {
            "type": "number",
            "description": "The 75th percentile"
          },
          "p95": {
            "type": "number",
            "description": "The 95th percentile"
          },
          "p99": {
            "type": "number",
            "description": "The 99th percentile"
          },
          "min": {
            "type": "number",
            "description": "The minimum value"
          },
          "max": {
            "type": "number",
            "description": "The maximum value"
          }
        },
        "required": [
          "p50",
          "p75",
          "p95",
          "p99",
          "min",
          "max"
        ],
        "description": "The aggregated connection timing of the check"
      },
      "PostCheckHttpOutputResponseAggregatedTls": {
        "type": "object",
        "properties": {
          "p50": {
            "type": "number",
            "description": "The 50th percentile"
          },
          "p75": {
            "type": "number",
            "description": "The 75th percentile"
          },
          "p95": {
            "type": "number",
            "description": "The 95th percentile"
          },
          "p99": {
            "type": "number",
            "description": "The 99th percentile"
          },
          "min": {
            "type": "number",
            "description": "The minimum value"
          },
          "max": {
            "type": "number",
            "description": "The maximum value"
          }
        },
        "required": [
          "p50",
          "p75",
          "p95",
          "p99",
          "min",
          "max"
        ],
        "description": "The aggregated tls timing of the check"
      },
      "PostCheckHttpOutputResponseAggregatedFirstByte": {
        "type": "object",
        "properties": {
          "p50": {
            "type": "number",
            "description": "The 50th percentile"
          },
          "p75": {
            "type": "number",
            "description": "The 75th percentile"
          },
          "p95": {
            "type": "number",
            "description": "The 95th percentile"
          },
          "p99": {
            "type": "number",
            "description": "The 99th percentile"
          },
          "min": {
            "type": "number",
            "description": "The minimum value"
          },
          "max": {
            "type": "number",
            "description": "The maximum value"
          }
        },
        "required": [
          "p50",
          "p75",
          "p95",
          "p99",
          "min",
          "max"
        ],
        "description": "The aggregated first byte timing of the check"
      },
      "PostCheckHttpOutputResponseAggregatedTransfer": {
        "type": "object",
        "properties": {
          "p50": {
            "type": "number",
            "description": "The 50th percentile"
          },
          "p75": {
            "type": "number",
            "description": "The 75th percentile"
          },
          "p95": {
            "type": "number",
            "description": "The 95th percentile"
          },
          "p99": {
            "type": "number",
            "description": "The 99th percentile"
          },
          "min": {
            "type": "number",
            "description": "The minimum value"
          },
          "max": {
            "type": "number",
            "description": "The maximum value"
          }
        },
        "required": [
          "p50",
          "p75",
          "p95",
          "p99",
          "min",
          "max"
        ],
        "description": "The aggregated transfer timing of the check"
      },
      "PostCheckHttpOutputResponseAggregatedLatency": {
        "type": "object",
        "properties": {
          "p50": {
            "type": "number",
            "description": "The 50th percentile"
          },
          "p75": {
            "type": "number",
            "description": "The 75th percentile"
          },
          "p95": {
            "type": "number",
            "description": "The 95th percentile"
          },
          "p99": {
            "type": "number",
            "description": "The 99th percentile"
          },
          "min": {
            "type": "number",
            "description": "The minimum value"
          },
          "max": {
            "type": "number",
            "description": "The maximum value"
          }
        },
        "required": [
          "p50",
          "p75",
          "p95",
          "p99",
          "min",
          "max"
        ],
        "description": "The aggregated latency timing of the check"
      },
      "PostCheckHttpOutputAggregated": {
        "type": "object",
        "properties": {
          "dns": {
            "$ref": "#/components/schemas/PostCheckHttpOutputAggregatedDns"
          },
          "connect": {
            "$ref": "#/components/schemas/PostCheckHttpOutputAggregatedConnect"
          },
          "tls": {
            "$ref": "#/components/schemas/PostCheckHttpOutputAggregatedTls"
          },
          "firstByte": {
            "$ref": "#/components/schemas/PostCheckHttpOutputAggregatedFirstByte"
          },
          "transfer": {
            "$ref": "#/components/schemas/PostCheckHttpOutputAggregatedTransfer"
          },
          "latency": {
            "$ref": "#/components/schemas/PostCheckHttpOutputAggregatedLatency"
          }
        },
        "required": [
          "dns",
          "connect",
          "tls",
          "firstByte",
          "transfer",
          "latency"
        ],
        "description": "The aggregated data of the check"
      },
      "PostCheckHttpOutputAggregatedDns": {
        "type": "object",
        "properties": {
          "p50": {
            "type": "number",
            "description": "The 50th percentile"
          },
          "p75": {
            "type": "number",
            "description": "The 75th percentile"
          },
          "p95": {
            "type": "number",
            "description": "The 95th percentile"
          },
          "p99": {
            "type": "number",
            "description": "The 99th percentile"
          },
          "min": {
            "type": "number",
            "description": "The minimum value"
          },
          "max": {
            "type": "number",
            "description": "The maximum value"
          }
        },
        "required": [
          "p50",
          "p75",
          "p95",
          "p99",
          "min",
          "max"
        ],
        "description": "The aggregated data of the check"
      },
      "PostCheckHttpOutputAggregatedConnect": {
        "type": "object",
        "properties": {
          "p50": {
            "type": "number",
            "description": "The 50th percentile"
          },
          "p75": {
            "type": "number",
            "description": "The 75th percentile"
          },
          "p95": {
            "type": "number",
            "description": "The 95th percentile"
          },
          "p99": {
            "type": "number",
            "description": "The 99th percentile"
          },
          "min": {
            "type": "number",
            "description": "The minimum value"
          },
          "max": {
            "type": "number",
            "description": "The maximum value"
          }
        },
        "required": [
          "p50",
          "p75",
          "p95",
          "p99",
          "min",
          "max"
        ],
        "description": "The aggregated data of the check"
      },
      "PostCheckHttpOutputAggregatedTls": {
        "type": "object",
        "properties": {
          "p50": {
            "type": "number",
            "description": "The 50th percentile"
          },
          "p75": {
            "type": "number",
            "description": "The 75th percentile"
          },
          "p95": {
            "type": "number",
            "description": "The 95th percentile"
          },
          "p99": {
            "type": "number",
            "description": "The 99th percentile"
          },
          "min": {
            "type": "number",
            "description": "The minimum value"
          },
          "max": {
            "type": "number",
            "description": "The maximum value"
          }
        },
        "required": [
          "p50",
          "p75",
          "p95",
          "p99",
          "min",
          "max"
        ],
        "description": "The aggregated data of the check"
      },
      "PostCheckHttpOutputAggregatedFirstByte": {
        "type": "object",
        "properties": {
          "p50": {
            "type": "number",
            "description": "The 50th percentile"
          },
          "p75": {
            "type": "number",
            "description": "The 75th percentile"
          },
          "p95": {
            "type": "number",
            "description": "The 95th percentile"
          },
          "p99": {
            "type": "number",
            "description": "The 99th percentile"
          },
          "min": {
            "type": "number",
            "description": "The minimum value"
          },
          "max": {
            "type": "number",
            "description": "The maximum value"
          }
        },
        "required": [
          "p50",
          "p75",
          "p95",
          "p99",
          "min",
          "max"
        ],
        "description": "The aggregated data of the check"
      },
      "PostCheckHttpOutputAggregatedTransfer": {
        "type": "object",
        "properties": {
          "p50": {
            "type": "number",
            "description": "The 50th percentile"
          },
          "p75": {
            "type": "number",
            "description": "The 75th percentile"
          },
          "p95": {
            "type": "number",
            "description": "The 95th percentile"
          },
          "p99": {
            "type": "number",
            "description": "The 99th percentile"
          },
          "min": {
            "type": "number",
            "description": "The minimum value"
          },
          "max": {
            "type": "number",
            "description": "The maximum value"
          }
        },
        "required": [
          "p50",
          "p75",
          "p95",
          "p99",
          "min",
          "max"
        ],
        "description": "The aggregated data of the check"
      },
      "PostCheckHttpOutputAggregatedLatency": {
        "type": "object",
        "properties": {
          "p50": {
            "type": "number",
            "description": "The 50th percentile"
          },
          "p75": {
            "type": "number",
            "description": "The 75th percentile"
          },
          "p95": {
            "type": "number",
            "description": "The 95th percentile"
          },
          "p99": {
            "type": "number",
            "description": "The 99th percentile"
          },
          "min": {
            "type": "number",
            "description": "The minimum value"
          },
          "max": {
            "type": "number",
            "description": "The maximum value"
          }
        },
        "required": [
          "p50",
          "p75",
          "p95",
          "p99",
          "min",
          "max"
        ],
        "description": "The aggregated data of the check"
      },
      "PostCheckHttpInputHeadersEntry": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "value"
        ]
      }
    },
    "parameters": {},
    "responses": {}
  },
  "paths": {
    "/monitor": {
      "get": {
        "tags": [
          "monitor"
        ],
        "summary": "List all monitors",
        "responses": {
          "200": {
            "description": "All the monitors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMonitorOutput"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "getMonitor",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/GetMonitorInput"
              }
            }
          },
          "required": false
        }
      },
      "post": {
        "tags": [
          "monitor"
        ],
        "summary": "Create a monitor",
        "requestBody": {
          "description": "The monitor to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostMonitorInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a monitor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Monitor"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "postMonitor"
      }
    },
    "/monitor/{id}": {
      "get": {
        "tags": [
          "monitor"
        ],
        "summary": "Get a monitor",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the monitor",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "The monitor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Monitor"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "getMonitorId",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/GetMonitorIdInput"
              }
            }
          },
          "required": false
        }
      },
      "put": {
        "tags": [
          "monitor"
        ],
        "summary": "Update a monitor",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the monitor",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "The monitor to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutMonitorIdInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update a monitor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Monitor"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "putMonitorId"
      },
      "delete": {
        "tags": [
          "monitor"
        ],
        "summary": "Delete a monitor",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the monitor",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "The monitor was successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteMonitorIdOutput"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "deleteMonitorId",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/DeleteMonitorIdInput"
              }
            }
          },
          "required": false
        }
      }
    },
    "/monitor/http": {
      "post": {
        "tags": [
          "monitor"
        ],
        "summary": "Create a  http monitor",
        "requestBody": {
          "description": "The monitor to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostMonitorHttpInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a monitor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Monitor"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "postMonitorHttp"
      }
    },
    "/monitor/tcp": {
      "post": {
        "tags": [
          "monitor"
        ],
        "summary": "Create a  tcp monitor",
        "requestBody": {
          "description": "The monitor to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostMonitorTcpInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a monitor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Monitor"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "postMonitorTcp"
      }
    },
    "/monitor/{id}/summary": {
      "get": {
        "tags": [
          "monitor"
        ],
        "summary": "Get a monitor summary",
        "description": "Get a monitor summary of the last 45 days of data to be used within a status page",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the monitor",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "All the historical metrics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMonitorIdSummaryOutput"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "getMonitorIdSummary",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/GetMonitorIdSummaryInput"
              }
            }
          },
          "required": false
        }
      }
    },
    "/monitor/{id}/trigger": {
      "post": {
        "tags": [
          "monitor"
        ],
        "summary": "Create a monitor trigger",
        "description": "Trigger a monitor check without waiting the result",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the monitor",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a result id that can be used to get the result of your trigger",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostMonitorIdTriggerOutput"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "postMonitorIdTrigger",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/PostMonitorIdTriggerInput"
              }
            }
          },
          "required": false
        }
      }
    },
    "/monitor/{id}/result/{resultId}": {
      "get": {
        "tags": [
          "monitor"
        ],
        "summary": "Get a monitor result",
        "description": "**WARNING:** This works only for HTTP monitors. We will add support for other types of monitors soon.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the monitor",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "string",
              "description": "The id of the result"
            },
            "required": true,
            "name": "resultId",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "All the metrics for the result id from the monitor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMonitorIdResultResultIdOutput"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "getMonitorIdResultResultId",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/GetMonitorIdResultResultIdInput"
              }
            }
          },
          "required": false
        }
      }
    },
    "/monitor/{id}/run": {
      "post": {
        "tags": [
          "monitor"
        ],
        "summary": "Create a monitor run",
        "description": "Run a synthetic check for a specific monitor. It will take all configs into account.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the monitor",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          },
          {
            "schema": {
              "type": "boolean",
              "nullable": true,
              "default": false,
              "description": "Don't wait for the result"
            },
            "required": false,
            "name": "no-wait",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "All the historical metrics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostMonitorIdRunOutput"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "postMonitorIdRun",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/PostMonitorIdRunInput"
              }
            }
          },
          "required": false
        }
      }
    },
    "/page/{id}": {
      "get": {
        "tags": [
          "page"
        ],
        "summary": "Get a status page",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the page",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get an Status page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "getPageId",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/GetPageIdInput"
              }
            }
          },
          "required": false
        }
      },
      "put": {
        "tags": [
          "page"
        ],
        "summary": "Update a status page",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the page",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "The monitor to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutPageIdInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get an Status page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "putPageId"
      }
    },
    "/page": {
      "get": {
        "tags": [
          "page"
        ],
        "summary": "List all status pages",
        "responses": {
          "200": {
            "description": "A list of your status pages",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPageOutput"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "getPage",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/GetPageInput"
              }
            }
          },
          "required": false
        }
      },
      "post": {
        "tags": [
          "page"
        ],
        "summary": "Create a status page",
        "requestBody": {
          "description": "The status page to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostPageInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get an Status page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Page"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "postPage"
      }
    },
    "/status_report": {
      "get": {
        "tags": [
          "status_report"
        ],
        "summary": "List all status reports",
        "responses": {
          "200": {
            "description": "Get all status reports",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetStatusReportOutput"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "getStatusReport",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/GetStatusReportInput"
              }
            }
          },
          "required": false
        }
      },
      "post": {
        "tags": [
          "status_report"
        ],
        "summary": "Create a status report",
        "requestBody": {
          "description": "The status report to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostStatusReportInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created status report",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusReport"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "postStatusReport"
      }
    },
    "/status_report/{id}": {
      "delete": {
        "tags": [
          "status_report"
        ],
        "summary": "Delete a status report",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the status report",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Status report deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteStatusReportIdOutput"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "deleteStatusReportId",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/DeleteStatusReportIdInput"
              }
            }
          },
          "required": false
        }
      },
      "get": {
        "tags": [
          "status_report"
        ],
        "summary": "Get a status report",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the status report",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get all status reports",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusReport"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "getStatusReportId",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/GetStatusReportIdInput"
              }
            }
          },
          "required": false
        }
      }
    },
    "/status_report/{id}/update": {
      "post": {
        "tags": [
          "status_report"
        ],
        "summary": "Create a status report update",
        "deprecated": true,
        "description": "Preferably use [`/status-report-updates`](#tag/status_report_update/POST/status_report_update) instead.",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the status report",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "the status report update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostStatusReportIdUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Status report updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusReport"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "postStatusReportIdUpdate"
      }
    },
    "/status_report_update/{id}": {
      "get": {
        "tags": [
          "status_report_update"
        ],
        "summary": "Get a status report update",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the update",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a status report update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusReportUpdate"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "getStatusReportUpdateId",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/GetStatusReportUpdateIdInput"
              }
            }
          },
          "required": false
        }
      }
    },
    "/status_report_update": {
      "post": {
        "tags": [
          "status_report_update"
        ],
        "summary": "Create a status report update",
        "requestBody": {
          "description": "The status report update to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostStatusReportUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The created status report update",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusReportUpdate"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "postStatusReportUpdate"
      }
    },
    "/incident": {
      "get": {
        "tags": [
          "incident"
        ],
        "summary": "List all incidents",
        "responses": {
          "200": {
            "description": "Get all incidents",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetIncidentOutput"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "getIncident",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/GetIncidentInput"
              }
            }
          },
          "required": false
        }
      }
    },
    "/incident/{id}": {
      "get": {
        "tags": [
          "incident"
        ],
        "summary": "Get an incident",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the Incident",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get an incident",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "getIncidentId",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/GetIncidentIdInput"
              }
            }
          },
          "required": false
        }
      },
      "put": {
        "tags": [
          "incident"
        ],
        "summary": "Update an incident",
        "description": "Acknowledge or resolve an incident",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the Incident",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "The incident to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutIncidentIdInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update a monitor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Incident"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "putIncidentId"
      }
    },
    "/maintenance": {
      "get": {
        "tags": [
          "maintenance"
        ],
        "summary": "List all maintenances",
        "responses": {
          "200": {
            "description": "Get all maintenances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMaintenanceOutput"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "getMaintenance",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/GetMaintenanceInput"
              }
            }
          },
          "required": false
        }
      },
      "post": {
        "tags": [
          "maintenance"
        ],
        "summary": "Create a maintenance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostMaintenanceInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a maintenance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Maintenance"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "postMaintenance"
      }
    },
    "/maintenance/{id}": {
      "get": {
        "tags": [
          "maintenance"
        ],
        "summary": "Get a maintenance",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the maintenance",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a maintenance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Maintenance"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "getMaintenanceId",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/GetMaintenanceIdInput"
              }
            }
          },
          "required": false
        }
      },
      "put": {
        "tags": [
          "maintenance"
        ],
        "summary": "Update a maintenance",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the maintenance",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutMaintenanceIdInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update a maintenance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Maintenance"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "putMaintenanceId"
      }
    },
    "/notification": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "List all notifications",
        "responses": {
          "200": {
            "description": "Get all your workspace notification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNotificationOutput"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "getNotification",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/GetNotificationInput"
              }
            }
          },
          "required": false
        }
      },
      "post": {
        "tags": [
          "notification"
        ],
        "summary": "Create a notification",
        "requestBody": {
          "description": "The notification to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostNotificationInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return the created notification",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "postNotification"
      }
    },
    "/notification/{id}": {
      "get": {
        "tags": [
          "notification"
        ],
        "summary": "Get a notification",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the notification",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "responses": {
          "200": {
            "description": "Get an Status page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Notification"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "getNotificationId",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/GetNotificationIdInput"
              }
            }
          },
          "required": false
        }
      }
    },
    "/page_subscriber/{id}/update": {
      "post": {
        "tags": [
          "page_subscriber"
        ],
        "summary": "Subscribe to a status page",
        "description": "Add a subscriber to a status page",
        "parameters": [
          {
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The id of the page",
              "example": "1"
            },
            "required": true,
            "name": "id",
            "in": "path"
          }
        ],
        "requestBody": {
          "description": "The subscriber payload",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostPageSubscriberIdUpdateInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user has been subscribed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageSubscriber"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "operationId": "postPageSubscriberIdUpdate"
      }
    },
    "/check/http": {
      "post": {
        "tags": [
          "check"
        ],
        "summary": "Run a single check",
        "requestBody": {
          "description": "The run request to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostCheckHttpInput"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a run result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCheckHttpOutput"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "postCheckHttp"
      }
    },
    "/whoami": {
      "get": {
        "tags": [
          "whoami"
        ],
        "summary": "Get your informations",
        "description": "Get the current workspace information attached to the API key.",
        "responses": {
          "200": {
            "description": "The current workspace information with the limits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            }
          },
          "400": {
            "description": "The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrBadRequest"
                }
              }
            }
          },
          "401": {
            "description": "The client must authenticate itself to get the requested response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrUnauthorized"
                }
              }
            }
          },
          "402": {
            "description": "A higher pricing plan is required to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrPaymentRequired"
                }
              }
            }
          },
          "403": {
            "description": "The client does not have the necessary permissions to access the resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrForbidden"
                }
              }
            }
          },
          "404": {
            "description": "The server can't find the requested resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrNotFound"
                }
              }
            }
          },
          "409": {
            "description": "The request could not be completed due to a conflict mainly due to unique constraints.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrConflict"
                }
              }
            }
          },
          "500": {
            "description": "The server has encountered a situation it doesn't know how to handle.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrInternalServerError"
                }
              }
            }
          }
        },
        "parameters": [],
        "operationId": "getWhoami",
        "requestBody": {
          "content": {
            "application/empty": {
              "schema": {
                "$ref": "#/components/schemas/GetWhoamiInput"
              }
            }
          },
          "required": false
        }
      }
    }
  },
  "x-sdk-augmented": true
}