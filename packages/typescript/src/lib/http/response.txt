export class ErrorResponse<Status extends number, Body extends unknown> {
  status: Status;
  error: Body;

  constructor(status: Status, error: Body) {
    this.status = status;
    this.error = error;
  }
}

// 4xx Client Errors
export class BadRequest<T> extends ErrorResponse<400, T> {}
export class Unauthorized<T = { message: string }> extends ErrorResponse<401, T> {}
export class PaymentRequired<T = { message: string }> extends ErrorResponse<402, T> {}
export class Forbidden<T = { message: string }> extends ErrorResponse<403, T> {}
export class NotFound<T = { message: string }> extends ErrorResponse<404, T> {}
export class MethodNotAllowed<T = { message: string }> extends ErrorResponse<405, T> {}
export class NotAcceptable<T = { message: string }> extends ErrorResponse<406, T> {}
export class Conflict<T = { message: string }> extends ErrorResponse<409, T> {}
export class Gone<T = { message: string }> extends ErrorResponse<410, T> {}
export class UnprocessableEntity<T = { message: string; errors?: Record<string, string[]> }> extends ErrorResponse<422, T> {}
export class TooManyRequests<T = { message: string; retryAfter?: string }> extends ErrorResponse<429, T> {}
export class PayloadTooLarge<T = { message: string }> extends ErrorResponse<413, T> {}
export class UnsupportedMediaType<T = { message: string }> extends ErrorResponse<415, T> {}

// 5xx Server Errors
export class InternalServerError<T = { message: string }> extends ErrorResponse<500, T> {}
export class NotImplemented<T = { message: string }> extends ErrorResponse<501, T> {}
export class BadGateway<T = { message: string }> extends ErrorResponse<502, T> {}
export class ServiceUnavailable<T = { message: string; retryAfter?: string }> extends ErrorResponse<503, T> {}
export class GatewayTimeout<T = { message: string }> extends ErrorResponse<504, T> {}

export type ClientError =
  | BadRequest<{ message: string }>
  | Unauthorized
  | PaymentRequired
  | Forbidden
  | NotFound
  | MethodNotAllowed
  | NotAcceptable
  | Conflict
  | Gone
  | UnprocessableEntity
  | TooManyRequests;

export type ServerError =
  | InternalServerError
  | NotImplemented
  | BadGateway
  | ServiceUnavailable
  | GatewayTimeout;

export type ProblematicResponse = ClientError | ServerError;
