export class APIResponse<Body = unknown, Status extends number = number> {
  static status: number;
  status: Status;
  data: Body;

  constructor(status: Status, data: Body) {
    this.status = status;
    this.data = data;
  }
}

export class APIError<Body, Status extends number = number> extends APIResponse<
  Body,
  Status
> {}

// 2xx Success
export class Ok<T> extends APIResponse<T, 200> {
  static status = 200;
}
export class Created<T> extends APIResponse<T, 201> {}
export class Accepted<T> extends APIResponse<T, 202> {}
export class NoContent extends APIResponse<null, 204> {}

// 4xx Client Errors
export class BadRequest<T> extends APIError<T, 400> {}
export class Unauthorized<T = { message: string }> extends APIError<T, 401> {}
export class PaymentRequired<T = { message: string }> extends APIError<
  T,
  402
> {}
export class Forbidden<T = { message: string }> extends APIError<T, 403> {}
export class NotFound<T = { message: string }> extends APIError<T, 404> {}
export class MethodNotAllowed<T = { message: string }> extends APIError<
  T,
  405
> {}
export class NotAcceptable<T = { message: string }> extends APIError<T, 406> {}
export class Conflict<T = { message: string }> extends APIError<T, 409> {}
export class Gone<T = { message: string }> extends APIError<T, 410> {}
export class UnprocessableEntity<
  T = { message: string; errors?: Record<string, string[]> },
> extends APIError<T, 422> {}
export class TooManyRequests<
  T = { message: string; retryAfter?: string },
> extends APIError<T, 429> {}
export class PayloadTooLarge<T = { message: string }> extends APIError<
  T,
  413
> {}
export class UnsupportedMediaType<T = { message: string }> extends APIError<
  T,
  415
> {}

// 5xx Server Errors
export class InternalServerError<T = { message: string }> extends APIError<
  T,
  500
> {}
export class NotImplemented<T = { message: string }> extends APIError<T, 501> {}
export class BadGateway<T = { message: string }> extends APIError<T, 502> {}
export class ServiceUnavailable<
  T = { message: string; retryAfter?: string },
> extends APIError<T, 503> {}
export class GatewayTimeout<T = { message: string }> extends APIError<T, 504> {}

export type ClientError =
  | BadRequest<{ message: string }>
  | Unauthorized
  | PaymentRequired
  | Forbidden
  | NotFound
  | MethodNotAllowed
  | NotAcceptable
  | Conflict
  | Gone
  | UnprocessableEntity
  | TooManyRequests;

export type ServerError =
  | InternalServerError
  | NotImplemented
  | BadGateway
  | ServiceUnavailable
  | GatewayTimeout;

export type ProblematicResponse = ClientError | ServerError;
