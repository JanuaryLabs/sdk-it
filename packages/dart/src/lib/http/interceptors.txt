abstract class Interceptor {
  RequestConfig before(RequestConfig config);
  void after();
}

class BaseUrlInterceptor extends Interceptor {
  final String Function() getBaseUrl;
  BaseUrlInterceptor(this.getBaseUrl);

  @override
  RequestConfig before(RequestConfig config) {
    final baseUrl = getBaseUrl();
    if (config.url.scheme.isEmpty) {
      config.url = Uri.parse(baseUrl + config.url.toString());
    }
    return config;
  }

  @override
  void after() {
    //
  }
}


class LoggingInterceptor extends Interceptor {
  // ANSI color codes
  static const String _reset = '\x1B[0m';
  static const String _green = '\x1B[32m';
  static const String _yellow = '\x1B[33m';
  static const String _blue = '\x1B[34m';
  static const String _magenta = '\x1B[35m';
  static const String _cyan = '\x1B[36m';

  @override
  RequestConfig before(RequestConfig config) {
    print('${_cyan}[LOG] --- HTTP REQUEST ---$_reset');
    print('${_yellow}[LOG] Method:    ${config.method.toUpperCase()}$_reset');
    print('${_green}[LOG] URL:       ${config.url}$_reset');
    print('${_magenta}[ContentType] ${config.headers['content-type']}$_reset');
    if (config.headers.isNotEmpty) {
      print('${_blue}[LOG] Headers:   ${config.headers}$_reset');
    } else {
      print('${_blue}[LOG] Headers:   <none>$_reset');
    }
    print('${_cyan}[LOG] --------------$_reset');
    return config;
  }

  @override
  void after() {
    // Optionally log after the request
  }
}

class RequestConfig {
  final String method;
  Uri url;
  final Map<String, String> headers;
  RequestConfig({required this.method, required this.url, required this.headers});
}
