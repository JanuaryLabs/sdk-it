import 'dart:convert';
import 'dart:io';

import 'package:http/http.dart' as http;
import 'package:http_parser/http_parser.dart';
import 'package:mime/mime.dart' as mime;

import './interceptors.dart';
import './responses.dart';

class Dispatcher {
  final List<Interceptor> interceptors;

  Dispatcher(this.interceptors);

  void _setHeaders(
    http.BaseRequest request,
    RequestConfig config, [
    String? contentType,
  ]) {
    request.headers.addAll(config.headers);
    for (var entry in config.input.headers.entries) {
      final value = entry.value;
      if (value != null) {
        request.headers[entry.key] = value;
      }
    }
    if (contentType != null) {
      request.headers['Content-Type'] = contentType;
    }
  }

  void _setParams(RequestConfig config) {
    final params = config.input.params;
    if (params.isEmpty) return;

    String path = config.url.toString();
    for (var entry in params.entries) {
      path = path.replaceAll('{${entry.key}}', entry.value.toString());
    }
    config.url = Uri.parse(path);
  }

  void _setQuery(RequestConfig config) {
    final query = config.input.query;
    if (query.isEmpty) return;

    final uri = config.url;
    final queryParameters = Map<String, String>.from(uri.queryParameters);

    for (var entry in query.entries) {
      if (entry.value != null) {
        queryParameters[entry.key] = entry.value.toString();
      }
    }

    config.url = uri.replace(queryParameters: queryParameters);
  }

  Future<http.StreamedResponse> multipart(RequestConfig config) async {
    final modifiedConfig = interceptors.fold(
      config,
      (acc, interceptor) => interceptor.before(acc),
    );
    _setParams(modifiedConfig);
    _setQuery(modifiedConfig);
    final request = http.MultipartRequest(
      modifiedConfig.method,
      modifiedConfig.url,
    );
    _setHeaders(request, modifiedConfig);

    for (var entry in config.input.body.entries) {
      final key = entry.key;
      final value = entry.value;
      if (value is File) {
        final mimeType = mime.lookupMimeType(value.path);
        request.files.add(
          http.MultipartFile(
            key,
            value.openRead(),
            await value.length(),
            filename: value.uri.pathSegments.last,
            contentType: mimeType != null ? MediaType.parse(mimeType) : null,
          ),
        );
      } else {
        request.fields[key] = value.toString();
      }
    }

    return request.send();
  }

  Future<http.StreamedResponse> empty(RequestConfig config) {
    final modifiedConfig = interceptors.fold(
      config,
      (acc, interceptor) => interceptor.before(acc),
    );
    _setParams(modifiedConfig);
    _setQuery(modifiedConfig);
    final request = http.Request(modifiedConfig.method, modifiedConfig.url);
    _setHeaders(request, modifiedConfig);
    return request.send();
  }

  Future<http.StreamedResponse> json(RequestConfig config) {
    final modifiedConfig = interceptors.fold(
      config,
      (acc, interceptor) => interceptor.before(acc),
    );
    _setParams(modifiedConfig);
    _setQuery(modifiedConfig);
    final request = http.Request(modifiedConfig.method, modifiedConfig.url);
    _setHeaders(request, modifiedConfig, 'application/json');

    if ((config.input.body is Map || config.input.body is List)) {
      request.body = jsonEncode(config.input.body);
    } else if (config.input.body is String) {
      request.body = config.input.body;
    } else {
      throw ArgumentError(
        'Unsupported body type: ${config.input.body.runtimeType}',
      );
    }

    return request.send();
  }
}

class Receiver {
  final List<Interceptor> interceptors;
  Receiver(this.interceptors);

  dynamic _parse(http.Response response) {
    final contentTypeHeader = response.headers['content-type'];
    final parsed = parseContentType(contentTypeHeader);
    if (parsed.type == 'application/json') {
      return jsonDecode(response.body);
    } else if (parsed.type == 'text/plain') {
      return response.body;
    } else if (parsed.type == 'application/octet-stream') {
      return response.bodyBytes;
    } else {
      throw UnsupportedError('Unsupported content type: ${parsed.type}');
    }
  }

  dynamic json(http.StreamedResponse stream) async {
    if (stream.statusCode >= 200 && stream.statusCode < 300) {
      final response = await http.Response.fromStream(stream);
      return _parse(response);
    }
    switch (stream.statusCode) {
      case 400:
        throw BadRequestError('');
      case 401:
        throw UnauthorizedError('');
      case 403:
        throw ForbiddenError('');
      case 404:
        throw NotFoundError('');
      case 500:
        throw InternalServerError('');
      case 402:
        throw PaymentRequiredError('');
      case 405:
        throw MethodNotAllowedError('');
      case 406:
        throw NotAcceptableError('');
      case 409:
        throw ConflictError('');
      case 410:
        throw GoneError('');
      case 422:
        throw UnprocessableEntityError('');
      case 429:
        throw TooManyRequestsError('');
      case 413:
        throw PayloadTooLargeError('');
      case 415:
        throw UnsupportedMediaTypeError('');
      case 501:
        throw NotImplementedError('');
      case 502:
        throw BadGatewayError('');
      case 503:
        throw ServiceUnavailableError('');
      case 504:
        throw GatewayTimeoutError('');
      default:
        throw UnknownApiError('', stream.statusCode);
    }
  }
}

({String type, Map<String, String> parameters}) parseContentType(
  String? contentTypeHeader,
) {
  if (contentTypeHeader == null || contentTypeHeader.isEmpty) {
    return (type: '', parameters: {});
  }
  final parts = contentTypeHeader.split(';');
  final type = parts[0].trim();
  final parameters = <String, String>{};
  for (var i = 1; i < parts.length; i++) {
    final param = parts[i].split('=');
    if (param.length == 2) {
      parameters[param[0].trim()] = param[1].trim();
    }
  }

  return (type: type, parameters: parameters);
}
